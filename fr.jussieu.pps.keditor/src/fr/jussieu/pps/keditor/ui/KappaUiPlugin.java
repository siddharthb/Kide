package fr.jussieu.pps.keditor.ui;

import org.eclipse.ui.plugin.AbstractUIPlugin;
import org.osgi.framework.BundleContext;

import java.util.MissingResourceException;
import java.util.ResourceBundle;

import org.eclipse.jface.preference.IPreferenceStore;
import org.eclipse.jface.preference.PreferenceConverter;
import org.eclipse.swt.graphics.RGB;
import org.eclipse.core.runtime.Platform;

/** The main plugin class. Generated by Eclipse and not modified much.
 * Contains "global" string constants used as identifiers by many classes. */
/**
 * The activator class controls the plug-in life cycle
 */
public class KappaUiPlugin extends AbstractUIPlugin {

	// The plug-in ID
	public static final String PLUGIN_ID = "fr.jussieu.pps.keditor";

	// The shared instance
	private static KappaUiPlugin plugin;
	

	/** Boolean attribute for whether bracket matching is enabled.
	 * We set it to true in initializeDefaultPluginPreferences,
	 * and never change it, so bracket matching is always on. */
	public static final String KAPPA_BRACKET_MATCHING_ENABLED = "fr.jussieu.pps.keditor.kappaBracketMatchingEnabled";
	/** Color attribute for the color of the bracket matching box. */
	public static final String KAPPA_BRACKET_MATCHING_COLOR = "fr.jussieu.pps.keditor.kappaBracketMatchingColor";

	/** Color attribute for the color for keywords in syntax highlighting. */
	public static final String KAPPA_KEYWORD_COLOR = "fr.jussieu.pps.keditor.kappaKeywordColor";
	/** Color attribute for the color for strings in syntax highlighting. */
	public static final String KAPPA_STRING_COLOR = "fr.jussieu.pps.keditor.kappaStringColor";
	/** Color attribute for the color for comments in syntax highlighting. */
	public static final String KAPPA_COMMENT_COLOR = "fr.jussieu.pps.keditor.kappaCommentColor";

	/** Integer attribute for the tab width. */
	public static final String KAPPA_TAB_WIDTH = "fr.jussieu.pps.keditor.kappaTabWidth";
	/** Boolean attribute for whether to mark syntax errors in the editor. */
	public static final String KAPPA_MARK_ERRORS = "fr.jussieu.pps.keditor.kappaMarkErrors";

	//Resource bundle.
	private ResourceBundle resourceBundle;

	
	
	/**
	 * The constructor
	 */
	public KappaUiPlugin() {
		super();
		plugin = this;
		try {
			resourceBundle = ResourceBundle.getBundle("fr.jussieu.pps.keditor.ui.KappaUiPluginResources");
		} catch (MissingResourceException x) {
			resourceBundle = null;
		}
		}

	/*
	 * (non-Javadoc)
	 * @see org.eclipse.ui.plugin.AbstractUIPlugin#start(org.osgi.framework.BundleContext)
	 */
	public void start(BundleContext context) throws Exception {
		super.start(context);
		plugin = this;
	}

	/*
	 * (non-Javadoc)
	 * @see org.eclipse.ui.plugin.AbstractUIPlugin#stop(org.osgi.framework.BundleContext)
	 */
	public void stop(BundleContext context) throws Exception {
		plugin = null;
		super.stop(context);
	}

	/**
	 * Returns the shared instance
	 *
	 * @return the shared instance
	 */
	public static KappaUiPlugin getDefault() {
		return plugin;
	}

	/** Initializes default values for this plug-in's preferences. */
	/* TODO: This is deprecated. See the deprecated comment in
	 * Plugin.initializeDefaultPluginPreferences. */
	protected void initializeDefaultPluginPreferences () {
		IPreferenceStore store = getPreferenceStore();
		store.setDefault(KAPPA_BRACKET_MATCHING_ENABLED, true);
		PreferenceConverter.setDefault(store, KAPPA_BRACKET_MATCHING_COLOR, new RGB(192, 192, 192));
		PreferenceConverter.setDefault(store, KAPPA_KEYWORD_COLOR, new RGB(128,0,128));
		PreferenceConverter.setDefault(store, KAPPA_STRING_COLOR, new RGB(0,0,255));
		PreferenceConverter.setDefault(store, KAPPA_COMMENT_COLOR, new RGB(0,128,0));
		store.setDefault(KAPPA_TAB_WIDTH, 2);
		store.setDefault(KAPPA_MARK_ERRORS, true);
		savePluginPreferences();
	}

	/**
	 * Returns the string from the plugin's resource bundle,
	 * or 'key' if not found.
	 */
	public static String getResourceString (String key) {
		ResourceBundle bundle = KappaUiPlugin.getDefault().getResourceBundle();
		try {
			return (bundle != null) ? bundle.getString(key) : key;
		} catch (MissingResourceException e) {
			return key;
		}
	}

	/**
	 * Returns the plugin's resource bundle,
	 */
	public ResourceBundle getResourceBundle () {
		return resourceBundle;
	}

	/** @return true if the system is compatible with linux (that is: Linux or Mac Os X) */
	public static boolean runningOnLinuxCompatibleSystem() {
		String os = Platform.getOS();
		return !(os.equals(Platform.OS_WIN32));
	}

}
