
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Mon Jul 11 13:21:23 CEST 2011
//----------------------------------------------------

package fr.jussieu.pps.kappa.core.parse;

import fr.jussieu.pps.kappa.core.parse.ast.*;
import java.util.List;
import java.util.ArrayList;

/** CUP v0.10k generated parser.
  * @version Mon Jul 11 13:21:23 CEST 2011
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\202\000\002\002\004\000\002\003\002\000\002\003" +
    "\004\000\002\003\003\000\002\003\003\000\002\004\002" +
    "\000\002\004\003\000\002\004\004\000\002\004\005\000" +
    "\002\004\005\000\002\004\006\000\002\004\005\000\002" +
    "\004\005\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\007\000\002\004\011\000\002\004\003" +
    "\000\002\010\002\000\002\010\004\000\002\010\004\000" +
    "\002\010\004\000\002\010\003\000\002\030\002\000\002" +
    "\030\005\000\002\030\005\000\002\030\005\000\002\030" +
    "\005\000\002\030\005\000\002\030\005\000\002\030\004" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\031\002\000\002\031\005\000\002\031\005\000\002" +
    "\031\004\000\002\031\004\000\002\031\005\000\002\031" +
    "\004\000\002\031\005\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\022\002\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\012\002\000\002" +
    "\012\003\000\002\012\007\000\002\012\003\000\002\013" +
    "\002\000\002\013\003\000\002\013\003\000\002\011\010" +
    "\000\002\011\006\000\002\011\003\000\002\015\002\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\017\002\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\020\002\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\021\002\000\002" +
    "\021\005\000\002\021\003\000\002\021\003\000\002\021" +
    "\005\000\002\021\005\000\002\021\005\000\002\021\005" +
    "\000\002\021\005\000\002\021\005\000\002\021\004\000" +
    "\002\021\004\000\002\021\004\000\002\021\004\000\002" +
    "\021\004\000\002\021\004\000\002\021\004\000\002\021" +
    "\003\000\002\016\002\000\002\016\005\000\002\016\003" +
    "\000\002\016\003\000\002\014\002\000\002\014\005\000" +
    "\002\014\005\000\002\014\005\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\003\000\002\014" +
    "\003\000\002\007\002\000\002\007\006\000\002\007\003" +
    "\000\002\007\003\000\002\024\002\000\002\024\003\000" +
    "\002\024\003\000\002\023\002\000\002\023\005\000\002" +
    "\023\003\000\002\023\003\000\002\025\002\000\002\025" +
    "\005\000\002\025\003\000\002\026\002\000\002\026\004" +
    "\000\002\026\003\000\002\027\002\000\002\027\004\000" +
    "\002\027\004\000\002\027\006\000\002\027\003\000\002" +
    "\027\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\274\000\056\002\000\003\012\004\016\005\011\006" +
    "\uffcf\007\uffcf\011\uffcf\012\uffcf\013\uffcf\017\uffcf\030\020" +
    "\041\014\042\010\045\006\051\017\052\015\054\007\066" +
    "\uffcf\072\uffcf\073\005\075\uffcf\076\uffcf\001\002\000\004" +
    "\002\ufffb\001\002\000\036\002\uffce\003\uffce\004\uffce\005" +
    "\uffce\006\uffce\007\uffce\011\uffce\012\uffce\013\uffce\017\uffce" +
    "\066\uffce\072\uffce\075\uffce\076\uffce\001\002\000\014\002" +
    "\uff96\003\274\004\uff96\005\uff96\072\132\001\002\000\066" +
    "\002\uffc1\003\267\004\uffc1\005\uffc1\007\056\016\042\017" +
    "\uffc1\020\uffc1\021\uffc1\046\044\047\045\050\035\053\uffc1" +
    "\055\041\056\030\057\054\060\034\061\033\062\uffc1\063" +
    "\046\064\uffc1\067\026\070\037\071\027\073\055\077\043" +
    "\001\002\000\014\002\uffee\003\234\004\uffee\005\uffee\073" +
    "\235\001\002\000\004\002\ufffe\001\002\000\036\002\ufffd" +
    "\003\uffcc\004\uffcc\005\uffcc\006\uffcc\007\uffcc\011\uffcc\012" +
    "\uffcc\013\uffcc\017\uffcc\066\uffcc\072\uffcc\075\uffcc\076\uffcc" +
    "\001\002\000\036\002\uffcb\003\247\004\uffcb\005\uffcb\006" +
    "\uffcb\007\142\011\uffcb\012\uffcb\013\uffcb\017\uffcb\066\uffcb" +
    "\072\132\075\uffcb\076\uffcb\001\002\000\004\073\243\001" +
    "\002\000\014\002\uffee\003\234\004\uffee\005\uffee\073\235" +
    "\001\002\000\056\002\000\003\012\004\016\005\011\006" +
    "\uffcf\007\uffcf\011\uffcf\012\uffcf\013\uffcf\017\uffcf\030\020" +
    "\041\014\042\010\045\006\051\017\052\015\054\007\066" +
    "\uffcf\072\uffcf\073\005\075\uffcf\076\uffcf\001\002\000\034" +
    "\002\uffd3\003\226\004\uffd3\005\uffd3\007\uffd3\011\uffd3\012" +
    "\uffd3\017\uffd3\071\227\072\uffd3\073\225\075\uffd3\076\uffd3" +
    "\001\002\000\102\003\051\007\047\016\042\017\uffc1\020" +
    "\uffc1\021\uffc1\022\uffe9\023\uffe9\024\uffc1\025\uffc1\026\uffc1" +
    "\027\032\034\uffe9\036\036\037\050\046\044\047\045\050" +
    "\035\053\uffc1\055\041\056\030\057\054\060\034\061\033" +
    "\062\uffc1\063\046\064\uffc1\067\026\070\037\071\027\073" +
    "\055\077\043\001\002\000\004\002\025\001\002\000\012" +
    "\002\000\003\024\004\016\005\011\001\002\000\004\002" +
    "\ufffa\001\002\000\004\002\ufffd\001\002\000\004\002\001" +
    "\001\002\000\064\002\uffbd\003\uffbd\004\uffbd\005\uffbd\007" +
    "\uffbd\010\uffbd\011\uffbd\012\uffbd\015\uffbd\017\uffbd\020\uffbd" +
    "\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd\034" +
    "\uffbd\035\uffbd\053\uffbd\062\uffbd\064\uffbd\072\uffbd\075\uffbd" +
    "\076\uffbd\001\002\000\064\002\uffbe\003\uffbe\004\uffbe\005" +
    "\uffbe\007\uffbe\010\uffbe\011\uffbe\012\uffbe\015\uffbe\017\uffbe" +
    "\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026" +
    "\uffbe\034\uffbe\035\uffbe\053\uffbe\062\uffbe\064\uffbe\072\uffbe" +
    "\075\uffbe\076\uffbe\001\002\000\122\002\uffc1\003\057\004" +
    "\uffc1\005\uffc1\007\056\010\uffc1\011\uffc1\012\uffc1\015\uffc1" +
    "\016\042\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024" +
    "\uffc1\025\uffc1\026\uffc1\034\uffc1\035\uffc1\046\044\047\045" +
    "\050\035\053\uffc1\055\041\056\030\057\054\060\034\061" +
    "\033\062\uffc1\063\046\064\uffc1\067\026\070\037\071\027" +
    "\072\uffc1\073\055\075\uffc1\076\uffc1\077\043\001\002\000" +
    "\064\002\uffb3\003\uffb3\004\uffb3\005\uffb3\007\uffb3\010\uffb3" +
    "\011\uffb3\012\uffb3\015\uffb3\017\uffb3\020\uffb3\021\uffb3\022" +
    "\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3\034\uffb3\035\uffb3" +
    "\053\uffb3\062\uffb3\064\uffb3\072\uffb3\075\uffb3\076\uffb3\001" +
    "\002\000\112\002\uffe9\003\051\004\uffe9\005\uffe9\007\047" +
    "\010\uffe9\016\042\017\uffc1\020\uffc1\021\uffc1\022\uffe9\023" +
    "\uffe9\024\uffc1\025\uffc1\026\uffc1\027\032\034\uffe9\036\036" +
    "\037\050\046\044\047\045\050\035\053\uffc1\055\041\056" +
    "\030\057\054\060\034\061\033\062\uffc1\063\046\064\uffc1" +
    "\067\026\070\037\071\027\073\055\077\043\001\002\000" +
    "\122\002\uffc1\003\057\004\uffc1\005\uffc1\007\056\010\uffc1" +
    "\011\uffc1\012\uffc1\015\uffc1\016\042\017\uffc1\020\uffc1\021" +
    "\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\034\uffc1" +
    "\035\uffc1\046\044\047\045\050\035\053\uffc1\055\041\056" +
    "\030\057\054\060\034\061\033\062\uffc1\063\046\064\uffc1" +
    "\067\026\070\037\071\027\072\uffc1\073\055\075\uffc1\076" +
    "\uffc1\077\043\001\002\000\122\002\uffc1\003\057\004\uffc1" +
    "\005\uffc1\007\056\010\uffc1\011\uffc1\012\uffc1\015\uffc1\016" +
    "\042\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1" +
    "\025\uffc1\026\uffc1\034\uffc1\035\uffc1\046\044\047\045\050" +
    "\035\053\uffc1\055\041\056\030\057\054\060\034\061\033" +
    "\062\uffc1\063\046\064\uffc1\067\026\070\037\071\027\072" +
    "\uffc1\073\055\075\uffc1\076\uffc1\077\043\001\002\000\064" +
    "\002\uffb7\003\uffb7\004\uffb7\005\uffb7\007\uffb7\010\uffb7\011" +
    "\uffb7\012\uffb7\015\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7" +
    "\023\uffb7\024\uffb7\025\uffb7\026\uffb7\034\uffb7\035\uffb7\053" +
    "\uffb7\062\uffb7\064\uffb7\072\uffb7\075\uffb7\076\uffb7\001\002" +
    "\000\022\002\uffe1\003\uffe1\004\uffe1\005\uffe1\010\uffe1\022" +
    "\uffe1\023\uffe1\034\uffe1\001\002\000\064\002\uffbc\003\uffbc" +
    "\004\uffbc\005\uffbc\007\uffbc\010\uffbc\011\uffbc\012\uffbc\015" +
    "\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc" +
    "\025\uffbc\026\uffbc\034\uffbc\035\uffbc\053\uffbc\062\uffbc\064" +
    "\uffbc\072\uffbc\075\uffbc\076\uffbc\001\002\000\010\022\107" +
    "\023\111\034\117\001\002\000\122\002\uffc1\003\057\004" +
    "\uffc1\005\uffc1\007\056\010\uffc1\011\uffc1\012\uffc1\015\uffc1" +
    "\016\042\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024" +
    "\uffc1\025\uffc1\026\uffc1\034\uffc1\035\uffc1\046\044\047\045" +
    "\050\035\053\uffc1\055\041\056\030\057\054\060\034\061" +
    "\033\062\uffc1\063\046\064\uffc1\067\026\070\037\071\027" +
    "\072\uffc1\073\055\075\uffc1\076\uffc1\077\043\001\002\000" +
    "\122\002\uffc1\003\057\004\uffc1\005\uffc1\007\056\010\uffc1" +
    "\011\uffc1\012\uffc1\015\uffc1\016\042\017\uffc1\020\uffc1\021" +
    "\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\034\uffc1" +
    "\035\uffc1\046\044\047\045\050\035\053\uffc1\055\041\056" +
    "\030\057\054\060\034\061\033\062\uffc1\063\046\064\uffc1" +
    "\067\026\070\037\071\027\072\uffc1\073\055\075\uffc1\076" +
    "\uffc1\077\043\001\002\000\064\002\uffbf\003\uffbf\004\uffbf" +
    "\005\uffbf\007\uffbf\010\uffbf\011\uffbf\012\uffbf\015\uffbf\017" +
    "\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf" +
    "\026\uffbf\034\uffbf\035\uffbf\053\uffbf\062\uffbf\064\uffbf\072" +
    "\uffbf\075\uffbf\076\uffbf\001\002\000\064\002\uffc0\003\uffc0" +
    "\004\uffc0\005\uffc0\007\uffc0\010\uffc0\011\uffc0\012\uffc0\015" +
    "\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0" +
    "\025\uffc0\026\uffc0\034\uffc0\035\uffc0\053\uffc0\062\uffc0\064" +
    "\uffc0\072\uffc0\075\uffc0\076\uffc0\001\002\000\064\002\uffb8" +
    "\003\uffb8\004\uffb8\005\uffb8\007\uffb8\010\uffb8\011\uffb8\012" +
    "\uffb8\015\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8" +
    "\024\uffb8\025\uffb8\026\uffb8\034\uffb8\035\uffb8\053\uffb8\062" +
    "\uffb8\064\uffb8\072\uffb8\075\uffb8\076\uffb8\001\002\000\122" +
    "\002\uffc1\003\057\004\uffc1\005\uffc1\007\056\010\uffc1\011" +
    "\uffc1\012\uffc1\015\uffc1\016\042\017\uffc1\020\uffc1\021\uffc1" +
    "\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\034\uffc1\035" +
    "\uffc1\046\044\047\045\050\035\053\uffc1\055\041\056\030" +
    "\057\054\060\034\061\033\062\uffc1\063\046\064\uffc1\067" +
    "\026\070\037\071\027\072\uffc1\073\055\075\uffc1\076\uffc1" +
    "\077\043\001\002\000\102\003\051\007\047\010\uffe9\016" +
    "\042\017\uffc1\020\uffc1\021\uffc1\022\uffe9\023\uffe9\024\uffc1" +
    "\025\uffc1\026\uffc1\027\032\036\036\037\050\046\044\047" +
    "\045\050\035\053\uffc1\055\041\056\030\057\054\060\034" +
    "\061\033\062\uffc1\063\046\064\uffc1\067\026\070\037\071" +
    "\027\073\055\077\043\001\002\000\022\002\uffe0\003\uffe0" +
    "\004\uffe0\005\uffe0\010\uffe0\022\uffe0\023\uffe0\034\uffe0\001" +
    "\002\000\044\002\uffdf\003\uffdf\004\uffdf\005\uffdf\010\uffdf" +
    "\017\uffbb\020\uffbb\021\uffbb\022\uffdf\023\uffdf\024\uffbb\025" +
    "\uffbb\026\uffbb\034\uffdf\053\uffbb\062\uffbb\064\uffbb\001\002" +
    "\000\064\002\uffb2\003\uffb2\004\uffb2\005\uffb2\007\uffb2\010" +
    "\uffb2\011\uffb2\012\uffb2\015\uffb2\017\uffb2\020\uffb2\021\uffb2" +
    "\022\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2\034\uffb2\035" +
    "\uffb2\053\uffb2\062\uffb2\064\uffb2\072\uffb2\075\uffb2\076\uffb2" +
    "\001\002\000\024\017\064\020\061\021\065\024\100\025" +
    "\077\026\101\053\066\062\062\064\063\001\002\000\122" +
    "\002\uffc1\003\057\004\uffc1\005\uffc1\007\056\010\uffc1\011" +
    "\uffc1\012\uffc1\015\uffc1\016\042\017\uffc1\020\uffc1\021\uffc1" +
    "\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\034\uffc1\035" +
    "\uffc1\046\044\047\045\050\035\053\uffc1\055\041\056\030" +
    "\057\054\060\034\061\033\062\uffc1\063\046\064\uffc1\067" +
    "\026\070\037\071\027\072\uffc1\073\055\075\uffc1\076\uffc1" +
    "\077\043\001\002\000\064\002\uffb9\003\uffb9\004\uffb9\005" +
    "\uffb9\007\uffb9\010\uffb9\011\uffb9\012\uffb9\015\uffb9\017\uffb9" +
    "\020\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9\026" +
    "\uffb9\034\uffb9\035\uffb9\053\uffb9\062\uffb9\064\uffb9\072\uffb9" +
    "\075\uffb9\076\uffb9\001\002\000\062\003\057\007\056\010" +
    "\uffc1\016\042\017\uffc1\020\uffc1\021\uffc1\046\044\047\045" +
    "\050\035\053\uffc1\055\041\056\030\057\054\060\034\061" +
    "\033\062\uffc1\063\046\064\uffc1\067\026\070\037\071\027" +
    "\073\055\077\043\001\002\000\064\002\uffbb\003\uffbb\004" +
    "\uffbb\005\uffbb\007\uffbb\010\uffbb\011\uffbb\012\uffbb\015\uffbb" +
    "\017\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025" +
    "\uffbb\026\uffbb\034\uffbb\035\uffbb\053\uffbb\062\uffbb\064\uffbb" +
    "\072\uffbb\075\uffbb\076\uffbb\001\002\000\064\002\uffa8\003" +
    "\uffa8\004\uffa8\005\uffa8\007\uffa8\010\uffa8\011\uffa8\012\uffa8" +
    "\015\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8\023\uffa8\024" +
    "\uffa8\025\uffa8\026\uffa8\034\uffa8\035\uffa8\053\uffa8\062\uffa8" +
    "\064\uffa8\072\uffa8\075\uffa8\076\uffa8\001\002\000\122\002" +
    "\uffc1\003\057\004\uffc1\005\uffc1\007\056\010\uffc1\011\uffc1" +
    "\012\uffc1\015\uffc1\016\042\017\uffc1\020\uffc1\021\uffc1\022" +
    "\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\034\uffc1\035\uffc1" +
    "\046\044\047\045\050\035\053\uffc1\055\041\056\030\057" +
    "\054\060\034\061\033\062\uffc1\063\046\064\uffc1\067\026" +
    "\070\037\071\027\072\uffc1\073\055\075\uffc1\076\uffc1\077" +
    "\043\001\002\000\122\002\uffc1\003\057\004\uffc1\005\uffc1" +
    "\007\056\010\uffc1\011\uffc1\012\uffc1\015\uffc1\016\042\017" +
    "\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1" +
    "\026\uffc1\034\uffc1\035\uffc1\046\044\047\045\050\035\053" +
    "\uffc1\055\041\056\030\057\054\060\034\061\033\062\uffc1" +
    "\063\046\064\uffc1\067\026\070\037\071\027\072\uffc1\073" +
    "\055\075\uffc1\076\uffc1\077\043\001\002\000\122\002\uffc1" +
    "\003\057\004\uffc1\005\uffc1\007\056\010\uffc1\011\uffc1\012" +
    "\uffc1\015\uffc1\016\042\017\uffc1\020\uffc1\021\uffc1\022\uffc1" +
    "\023\uffc1\024\uffc1\025\uffc1\026\uffc1\034\uffc1\035\uffc1\046" +
    "\044\047\045\050\035\053\uffc1\055\041\056\030\057\054" +
    "\060\034\061\033\062\uffc1\063\046\064\uffc1\067\026\070" +
    "\037\071\027\072\uffc1\073\055\075\uffc1\076\uffc1\077\043" +
    "\001\002\000\122\002\uffc1\003\057\004\uffc1\005\uffc1\007" +
    "\056\010\uffc1\011\uffc1\012\uffc1\015\uffc1\016\042\017\uffc1" +
    "\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026" +
    "\uffc1\034\uffc1\035\uffc1\046\044\047\045\050\035\053\uffc1" +
    "\055\041\056\030\057\054\060\034\061\033\062\uffc1\063" +
    "\046\064\uffc1\067\026\070\037\071\027\072\uffc1\073\055" +
    "\075\uffc1\076\uffc1\077\043\001\002\000\122\002\uffc1\003" +
    "\057\004\uffc1\005\uffc1\007\056\010\uffc1\011\uffc1\012\uffc1" +
    "\015\uffc1\016\042\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023" +
    "\uffc1\024\uffc1\025\uffc1\026\uffc1\034\uffc1\035\uffc1\046\044" +
    "\047\045\050\035\053\uffc1\055\041\056\030\057\054\060" +
    "\034\061\033\062\uffc1\063\046\064\uffc1\067\026\070\037" +
    "\071\027\072\uffc1\073\055\075\uffc1\076\uffc1\077\043\001" +
    "\002\000\122\002\uffc1\003\057\004\uffc1\005\uffc1\007\056" +
    "\010\uffc1\011\uffc1\012\uffc1\015\uffc1\016\042\017\uffc1\020" +
    "\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1" +
    "\034\uffc1\035\uffc1\046\044\047\045\050\035\053\uffc1\055" +
    "\041\056\030\057\054\060\034\061\033\062\uffc1\063\046" +
    "\064\uffc1\067\026\070\037\071\027\072\uffc1\073\055\075" +
    "\uffc1\076\uffc1\077\043\001\002\000\064\002\uffaf\003\uffaf" +
    "\004\uffaf\005\uffaf\007\uffaf\010\uffaf\011\uffaf\012\uffaf\015" +
    "\uffaf\017\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf\024\uffaf" +
    "\025\uffaf\026\uffaf\034\uffaf\035\uffaf\053\uffaf\062\062\064" +
    "\063\072\uffaf\075\uffaf\076\uffaf\001\002\000\064\002\uffae" +
    "\003\uffae\004\uffae\005\uffae\007\uffae\010\uffae\011\uffae\012" +
    "\uffae\015\uffae\017\uffae\020\061\021\uffae\022\uffae\023\uffae" +
    "\024\uffae\025\uffae\026\uffae\034\uffae\035\uffae\053\066\062" +
    "\062\064\063\072\uffae\075\uffae\076\uffae\001\002\000\064" +
    "\002\uffb0\003\uffb0\004\uffb0\005\uffb0\007\uffb0\010\uffb0\011" +
    "\uffb0\012\uffb0\015\uffb0\017\uffb0\020\061\021\uffb0\022\uffb0" +
    "\023\uffb0\024\uffb0\025\uffb0\026\uffb0\034\uffb0\035\uffb0\053" +
    "\066\062\062\064\063\072\uffb0\075\uffb0\076\uffb0\001\002" +
    "\000\064\002\uffac\003\uffac\004\uffac\005\uffac\007\uffac\010" +
    "\uffac\011\uffac\012\uffac\015\uffac\017\uffac\020\uffac\021\uffac" +
    "\022\uffac\023\uffac\024\uffac\025\uffac\026\uffac\034\uffac\035" +
    "\uffac\053\uffac\062\062\064\uffac\072\uffac\075\uffac\076\uffac" +
    "\001\002\000\064\002\uffad\003\uffad\004\uffad\005\uffad\007" +
    "\uffad\010\uffad\011\uffad\012\uffad\015\uffad\017\uffad\020\uffad" +
    "\021\uffad\022\uffad\023\uffad\024\uffad\025\uffad\026\uffad\034" +
    "\uffad\035\uffad\053\uffad\062\062\064\uffad\072\uffad\075\uffad" +
    "\076\uffad\001\002\000\064\002\uffb1\003\uffb1\004\uffb1\005" +
    "\uffb1\007\uffb1\010\uffb1\011\uffb1\012\uffb1\015\uffb1\017\uffb1" +
    "\020\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1\026" +
    "\uffb1\034\uffb1\035\uffb1\053\uffb1\062\062\064\063\072\uffb1" +
    "\075\uffb1\076\uffb1\001\002\000\020\010\076\017\064\020" +
    "\061\021\065\053\066\062\062\064\063\001\002\000\064" +
    "\002\uffb4\003\uffb4\004\uffb4\005\uffb4\007\uffb4\010\uffb4\011" +
    "\uffb4\012\uffb4\015\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4" +
    "\023\uffb4\024\uffb4\025\uffb4\026\uffb4\034\uffb4\035\uffb4\053" +
    "\uffb4\062\uffb4\064\uffb4\072\uffb4\075\uffb4\076\uffb4\001\002" +
    "\000\076\002\uffc1\003\057\004\uffc1\005\uffc1\007\056\010" +
    "\uffc1\016\042\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1" +
    "\034\uffc1\046\044\047\045\050\035\053\uffc1\055\041\056" +
    "\030\057\054\060\034\061\033\062\uffc1\063\046\064\uffc1" +
    "\067\026\070\037\071\027\073\055\077\043\001\002\000" +
    "\076\002\uffc1\003\057\004\uffc1\005\uffc1\007\056\010\uffc1" +
    "\016\042\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\034" +
    "\uffc1\046\044\047\045\050\035\053\uffc1\055\041\056\030" +
    "\057\054\060\034\061\033\062\uffc1\063\046\064\uffc1\067" +
    "\026\070\037\071\027\073\055\077\043\001\002\000\076" +
    "\002\uffc1\003\057\004\uffc1\005\uffc1\007\056\010\uffc1\016" +
    "\042\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\034\uffc1" +
    "\046\044\047\045\050\035\053\uffc1\055\041\056\030\057" +
    "\054\060\034\061\033\062\uffc1\063\046\064\uffc1\067\026" +
    "\070\037\071\027\073\055\077\043\001\002\000\036\002" +
    "\uffe3\003\uffe3\004\uffe3\005\uffe3\010\uffe3\017\064\020\061" +
    "\021\065\022\uffe3\023\uffe3\034\uffe3\053\066\062\062\064" +
    "\063\001\002\000\036\002\uffe5\003\uffe5\004\uffe5\005\uffe5" +
    "\010\uffe5\017\064\020\061\021\065\022\uffe5\023\uffe5\034" +
    "\uffe5\053\066\062\062\064\063\001\002\000\036\002\uffe4" +
    "\003\uffe4\004\uffe4\005\uffe4\010\uffe4\017\064\020\061\021" +
    "\065\022\uffe4\023\uffe4\034\uffe4\053\066\062\062\064\063" +
    "\001\002\000\010\010\110\022\107\023\111\001\002\000" +
    "\026\010\076\017\064\020\061\021\065\024\100\025\077" +
    "\026\101\053\066\062\062\064\063\001\002\000\112\002" +
    "\uffe9\003\051\004\uffe9\005\uffe9\007\047\010\uffe9\016\042" +
    "\017\uffc1\020\uffc1\021\uffc1\022\uffe9\023\uffe9\024\uffc1\025" +
    "\uffc1\026\uffc1\027\032\034\uffe9\036\036\037\050\046\044" +
    "\047\045\050\035\053\uffc1\055\041\056\030\057\054\060" +
    "\034\061\033\062\uffc1\063\046\064\uffc1\067\026\070\037" +
    "\071\027\073\055\077\043\001\002\000\022\002\uffe8\003" +
    "\uffe8\004\uffe8\005\uffe8\010\uffe8\022\uffe8\023\uffe8\034\uffe8" +
    "\001\002\000\112\002\uffe9\003\051\004\uffe9\005\uffe9\007" +
    "\047\010\uffe9\016\042\017\uffc1\020\uffc1\021\uffc1\022\uffe9" +
    "\023\uffe9\024\uffc1\025\uffc1\026\uffc1\027\032\034\uffe9\036" +
    "\036\037\050\046\044\047\045\050\035\053\uffc1\055\041" +
    "\056\030\057\054\060\034\061\033\062\uffc1\063\046\064" +
    "\uffc1\067\026\070\037\071\027\073\055\077\043\001\002" +
    "\000\022\002\uffe6\003\uffe6\004\uffe6\005\uffe6\010\uffe6\022" +
    "\107\023\uffe6\034\uffe6\001\002\000\022\002\uffe7\003\uffe7" +
    "\004\uffe7\005\uffe7\010\uffe7\022\uffe7\023\uffe7\034\uffe7\001" +
    "\002\000\064\002\uffa7\003\uffa7\004\uffa7\005\uffa7\007\uffa7" +
    "\010\uffa7\011\uffa7\012\uffa7\015\uffa7\017\uffa7\020\uffa7\021" +
    "\uffa7\022\uffa7\023\uffa7\024\uffa7\025\uffa7\026\uffa7\034\uffa7" +
    "\035\uffa7\053\uffa7\062\uffa7\064\uffa7\072\uffa7\075\uffa7\076" +
    "\uffa7\001\002\000\064\002\uffa5\003\uffa5\004\uffa5\005\uffa5" +
    "\007\uffa5\010\uffa5\011\uffa5\012\uffa5\015\uffa5\017\uffa5\020" +
    "\uffa5\021\uffa5\022\uffa5\023\uffa5\024\uffa5\025\uffa5\026\uffa5" +
    "\034\uffa5\035\uffa5\053\uffa5\062\uffa5\064\uffa5\072\uffa5\075" +
    "\uffa5\076\uffa5\001\002\000\064\002\uffaa\003\uffaa\004\uffaa" +
    "\005\uffaa\007\uffaa\010\uffaa\011\uffaa\012\uffaa\015\uffaa\017" +
    "\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa" +
    "\026\uffaa\034\uffaa\035\uffaa\053\uffaa\062\uffaa\064\uffaa\072" +
    "\uffaa\075\uffaa\076\uffaa\001\002\000\030\002\uffde\003\122" +
    "\004\uffde\005\uffde\007\127\031\124\032\123\035\uffde\040" +
    "\126\065\125\073\121\001\002\000\014\002\000\003\024" +
    "\004\016\005\011\035\215\001\002\000\004\033\212\001" +
    "\002\000\016\002\uffd4\003\uffd4\004\uffd4\005\uffd4\010\uffd4" +
    "\035\uffd4\001\002\000\104\002\uffc1\003\145\004\uffc1\005" +
    "\uffc1\007\134\010\uffc1\011\uffc1\012\uffc1\016\042\017\uffc1" +
    "\020\uffc1\021\uffc1\035\uffc1\046\044\047\045\050\035\053" +
    "\uffc1\055\041\056\030\057\054\060\034\061\033\062\uffc1" +
    "\063\046\064\uffc1\067\026\070\037\071\027\072\132\073" +
    "\055\075\uffc1\076\uffc1\077\043\001\002\000\104\002\uffc1" +
    "\003\136\004\uffc1\005\uffc1\007\134\010\uffc1\011\uffc1\012" +
    "\uffc1\016\042\017\uffc1\020\uffc1\021\uffc1\035\uffc1\046\044" +
    "\047\045\050\035\053\uffc1\055\041\056\030\057\054\060" +
    "\034\061\033\062\uffc1\063\046\064\uffc1\067\026\070\037" +
    "\071\027\072\132\073\055\075\uffc1\076\uffc1\077\043\001" +
    "\002\000\016\002\uffd5\003\uffd5\004\uffd5\005\uffd5\010\uffd5" +
    "\035\uffd5\001\002\000\016\002\uffd6\003\uffd6\004\uffd6\005" +
    "\uffd6\010\uffd6\035\uffd6\001\002\000\022\003\122\007\127" +
    "\010\uffde\031\124\032\123\040\126\065\125\073\121\001" +
    "\002\000\004\010\131\001\002\000\016\002\uffdd\003\uffdd" +
    "\004\uffdd\005\uffdd\010\uffdd\035\uffdd\001\002\000\042\002" +
    "\uff94\003\uff94\004\uff94\005\uff94\006\uff94\007\160\010\uff94" +
    "\011\uff94\012\uff94\013\uff94\017\uff94\035\uff94\066\uff94\072" +
    "\uff94\075\uff94\076\uff94\001\002\000\042\002\uff98\003\uff98" +
    "\004\uff98\005\uff98\006\uff98\007\uff98\010\uff98\011\146\012" +
    "\152\013\uff98\017\150\035\uff98\066\uff98\072\uff98\075\151" +
    "\076\147\001\002\000\074\003\145\007\134\010\uffc1\011" +
    "\uff96\012\uff96\016\042\017\uffc1\020\uffc1\021\uffc1\046\044" +
    "\047\045\050\035\053\uffc1\055\041\056\030\057\054\060" +
    "\034\061\033\062\uffc1\063\046\064\uffc1\067\026\070\037" +
    "\071\027\072\132\073\055\075\uff96\076\uff96\077\043\001" +
    "\002\000\016\002\uffdb\003\uffdb\004\uffdb\005\uffdb\010\uffdb" +
    "\035\uffdb\001\002\000\046\002\uffda\003\uffda\004\uffda\005" +
    "\uffda\007\uffbb\010\uffda\011\uffbb\012\uffbb\017\uffbb\020\uffbb" +
    "\021\uffbb\035\uffda\053\uffbb\062\uffbb\064\uffbb\072\uffbb\075" +
    "\uffbb\076\uffbb\001\002\000\046\002\uff9f\003\141\004\uff9f" +
    "\005\uff9f\007\142\010\uff9f\011\uff96\012\uff96\017\064\020" +
    "\061\021\065\035\uff9f\053\066\062\062\064\063\072\132" +
    "\075\uff96\076\uff96\001\002\000\016\002\uffdc\003\uffdc\004" +
    "\uffdc\005\uffdc\010\uffdc\035\uffdc\001\002\000\042\002\uff97" +
    "\003\uff97\004\uff97\005\uff97\006\uff97\007\uff97\010\uff97\011" +
    "\uff97\012\uff97\013\uff97\017\uff97\035\uff97\066\uff97\072\uff97" +
    "\075\uff97\076\uff97\001\002\000\024\003\141\007\142\010" +
    "\uff9f\011\uff96\012\uff96\017\uff96\072\132\075\uff96\076\uff96" +
    "\001\002\000\004\010\144\001\002\000\042\002\uff9e\003" +
    "\uff9e\004\uff9e\005\uff9e\006\uff9e\007\uff9e\010\uff9e\011\uff9e" +
    "\012\uff9e\013\uff9e\017\uff9e\035\uff9e\066\uff9e\072\uff9e\075" +
    "\uff9e\076\uff9e\001\002\000\046\002\uffbb\003\uffbb\004\uffbb" +
    "\005\uffbb\007\uffbb\010\uffbb\011\uffbb\012\uffbb\017\uffbb\020" +
    "\uffbb\021\uffbb\035\uffbb\053\uffbb\062\uffbb\064\uffbb\072\uffbb" +
    "\075\uffbb\076\uffbb\001\002\000\042\002\uff9f\003\141\004" +
    "\uff9f\005\uff9f\006\uff9f\007\142\010\uff9f\011\uff9f\012\uff9f" +
    "\013\uff9f\017\uff9f\035\uff9f\066\uff9f\072\132\075\uff9f\076" +
    "\uff9f\001\002\000\042\002\uff9f\003\141\004\uff9f\005\uff9f" +
    "\006\uff9f\007\142\010\uff9f\011\uff9f\012\uff9f\013\uff9f\017" +
    "\uff9f\035\uff9f\066\uff9f\072\132\075\uff9f\076\uff9f\001\002" +
    "\000\042\002\uff9f\003\141\004\uff9f\005\uff9f\006\uff9f\007" +
    "\142\010\uff9f\011\uff9f\012\uff9f\013\uff9f\017\uff9f\035\uff9f" +
    "\066\uff9f\072\132\075\uff9f\076\uff9f\001\002\000\042\002" +
    "\uff9f\003\141\004\uff9f\005\uff9f\006\uff9f\007\142\010\uff9f" +
    "\011\uff9f\012\uff9f\013\uff9f\017\uff9f\035\uff9f\066\uff9f\072" +
    "\132\075\uff9f\076\uff9f\001\002\000\042\002\uff9f\003\141" +
    "\004\uff9f\005\uff9f\006\uff9f\007\142\010\uff9f\011\uff9f\012" +
    "\uff9f\013\uff9f\017\uff9f\035\uff9f\066\uff9f\072\132\075\uff9f" +
    "\076\uff9f\001\002\000\042\002\uff9c\003\uff9c\004\uff9c\005" +
    "\uff9c\006\uff9c\007\uff9c\010\uff9c\011\uff9c\012\uff9c\013\uff9c" +
    "\017\uff9c\035\uff9c\066\uff9c\072\uff9c\075\uff9c\076\uff9c\001" +
    "\002\000\042\002\uff9b\003\uff9b\004\uff9b\005\uff9b\006\uff9b" +
    "\007\uff9b\010\uff9b\011\uff9b\012\uff9b\013\uff9b\017\uff9b\035" +
    "\uff9b\066\uff9b\072\uff9b\075\uff9b\076\uff9b\001\002\000\042" +
    "\002\uff9a\003\uff9a\004\uff9a\005\uff9a\006\uff9a\007\uff9a\010" +
    "\uff9a\011\uff9a\012\uff9a\013\uff9a\017\uff9a\035\uff9a\066\uff9a" +
    "\072\uff9a\075\uff9a\076\uff9a\001\002\000\042\002\uff99\003" +
    "\uff99\004\uff99\005\uff99\006\uff99\007\uff99\010\uff99\011\uff99" +
    "\012\uff99\013\uff99\017\uff99\035\uff99\066\uff99\072\uff99\075" +
    "\uff99\076\uff99\001\002\000\042\002\uff9d\003\uff9d\004\uff9d" +
    "\005\uff9d\006\uff9d\007\uff9d\010\uff9d\011\uff9d\012\uff9d\013" +
    "\uff9d\017\uff9d\035\uff9d\066\uff9d\072\uff9d\075\uff9d\076\uff9d" +
    "\001\002\000\012\003\163\010\uff92\011\uff8b\072\161\001" +
    "\002\000\016\003\174\010\uff88\011\uff88\014\uff88\043\uff88" +
    "\074\173\001\002\000\006\010\uff8d\011\167\001\002\000" +
    "\006\010\uff90\011\uff89\001\002\000\004\010\166\001\002" +
    "\000\004\010\uff91\001\002\000\042\002\uff95\003\uff95\004" +
    "\uff95\005\uff95\006\uff95\007\uff95\010\uff95\011\uff95\012\uff95" +
    "\013\uff95\017\uff95\035\uff95\066\uff95\072\uff95\075\uff95\076" +
    "\uff95\001\002\000\012\003\170\010\uff8f\011\uff8b\072\161" +
    "\001\002\000\006\010\uff8c\011\uff89\001\002\000\004\010" +
    "\uff8e\001\002\000\012\010\uff85\011\uff85\014\177\043\200" +
    "\001\002\000\016\003\174\010\uff88\011\uff88\014\uff88\043" +
    "\uff88\074\173\001\002\000\012\010\uff86\011\uff86\014\uff86" +
    "\043\uff86\001\002\000\012\010\uff87\011\uff87\014\uff87\043" +
    "\uff87\001\002\000\006\010\uff8a\011\uff8a\001\002\000\012" +
    "\003\202\044\204\071\203\072\201\001\002\000\006\010" +
    "\uff81\011\uff81\001\002\000\004\012\205\001\002\000\006" +
    "\010\uff80\011\uff80\001\002\000\006\010\uff84\011\uff84\001" +
    "\002\000\006\010\uff83\011\uff83\001\002\000\004\072\206" +
    "\001\002\000\006\010\uff82\011\uff82\001\002\000\016\002" +
    "\uffd8\003\uffd8\004\uffd8\005\uffd8\010\uffd8\035\uffd8\001\002" +
    "\000\046\002\uff9f\003\141\004\uff9f\005\uff9f\007\142\010" +
    "\uff9f\011\uff96\012\uff96\017\064\020\061\021\065\035\uff9f" +
    "\053\066\062\062\064\063\072\132\075\uff96\076\uff96\001" +
    "\002\000\016\002\uffd9\003\uffd9\004\uffd9\005\uffd9\010\uffd9" +
    "\035\uffd9\001\002\000\072\002\uffc1\003\057\004\uffc1\005" +
    "\uffc1\007\056\010\uffc1\016\042\017\uffc1\020\uffc1\021\uffc1" +
    "\035\uffc1\046\044\047\045\050\035\053\uffc1\055\041\056" +
    "\030\057\054\060\034\061\033\062\uffc1\063\046\064\uffc1" +
    "\067\026\070\037\071\027\073\055\077\043\001\002\000" +
    "\032\002\uffd7\003\uffd7\004\uffd7\005\uffd7\010\uffd7\017\064" +
    "\020\061\021\065\035\uffd7\053\066\062\062\064\063\001" +
    "\002\000\004\002\ufff1\001\002\000\106\002\uffe9\003\051" +
    "\004\uffe9\005\uffe9\007\047\016\042\017\uffc1\020\uffc1\021" +
    "\uffc1\022\uffe9\023\uffe9\024\uffc1\025\uffc1\026\uffc1\027\032" +
    "\036\036\037\050\046\044\047\045\050\035\053\uffc1\055" +
    "\041\056\030\057\054\060\034\061\033\062\uffc1\063\046" +
    "\064\uffc1\067\026\070\037\071\027\073\055\077\043\001" +
    "\002\000\016\002\000\003\024\004\016\005\011\022\107" +
    "\023\111\001\002\000\004\002\ufff0\001\002\000\064\002" +
    "\uffa6\003\uffa6\004\uffa6\005\uffa6\007\uffa6\010\uffa6\011\uffa6" +
    "\012\uffa6\015\uffa6\017\uffa6\020\uffa6\021\uffa6\022\uffa6\023" +
    "\uffa6\024\uffa6\025\uffa6\026\uffa6\034\uffa6\035\uffa6\053\uffa6" +
    "\062\uffa6\064\uffa6\072\uffa6\075\uffa6\076\uffa6\001\002\000" +
    "\064\002\uffab\003\uffab\004\uffab\005\uffab\007\uffab\010\uffab" +
    "\011\uffab\012\uffab\015\uffab\017\uffab\020\uffab\021\uffab\022" +
    "\uffab\023\uffab\024\uffab\025\uffab\026\uffab\034\uffab\035\uffab" +
    "\053\uffab\062\uffab\064\uffab\072\uffab\075\uffab\076\uffab\001" +
    "\002\000\022\002\uffe2\003\uffe2\004\uffe2\005\uffe2\010\uffe2" +
    "\022\uffe2\023\uffe2\034\uffe2\001\002\000\064\002\uffa9\003" +
    "\uffa9\004\uffa9\005\uffa9\007\uffa9\010\uffa9\011\uffa9\012\uffa9" +
    "\015\uffa9\017\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9\024" +
    "\uffa9\025\uffa9\026\uffa9\034\uffa9\035\uffa9\053\uffa9\062\uffa9" +
    "\064\uffa9\072\uffa9\075\uffa9\076\uffa9\001\002\000\030\002" +
    "\uff9f\003\141\004\uff9f\005\uff9f\007\142\011\uff96\012\uff96" +
    "\017\uff96\072\132\075\uff96\076\uff96\001\002\000\030\002" +
    "\uffd1\003\uffd1\004\uffd1\005\uffd1\007\uffd1\011\uffd1\012\uffd1" +
    "\017\uffd1\072\uffd1\075\uffd1\076\uffd1\001\002\000\030\002" +
    "\000\003\024\004\016\005\011\007\uffd0\011\uffd0\012\uffd0" +
    "\017\uffd0\072\uffd0\075\uffd0\076\uffd0\001\002\000\030\002" +
    "\uffd2\003\uffd2\004\uffd2\005\uffd2\007\uffd2\011\uffd2\012\uffd2" +
    "\017\uffd2\072\uffd2\075\uffd2\076\uffd2\001\002\000\004\002" +
    "\ufff6\001\002\000\012\002\000\003\024\004\016\005\011" +
    "\001\002\000\004\002\ufff7\001\002\000\004\002\uffff\001" +
    "\002\000\012\002\uffea\003\uffea\004\uffea\005\uffea\001\002" +
    "\000\100\002\uffc1\003\241\004\uffc1\005\uffc1\007\134\011" +
    "\uff96\012\uff96\016\042\017\uffc1\020\uffc1\021\uffc1\046\044" +
    "\047\045\050\035\053\uffc1\055\041\056\030\057\054\060" +
    "\034\061\033\062\uffc1\063\046\064\uffc1\067\026\070\037" +
    "\071\027\072\132\073\055\075\uff96\076\uff96\077\043\001" +
    "\002\000\012\002\000\003\024\004\016\005\011\001\002" +
    "\000\004\002\ufff5\001\002\000\012\002\uffed\003\uffed\004" +
    "\uffed\005\uffed\001\002\000\036\002\uffeb\003\uffeb\004\uffeb" +
    "\005\uffeb\011\uff93\012\uff93\017\uffbb\020\uffbb\021\uffbb\053" +
    "\uffbb\062\uffbb\064\uffbb\075\uff93\076\uff93\001\002\000\026" +
    "\002\uffec\003\uffec\004\uffec\005\uffec\017\064\020\061\021" +
    "\065\053\066\062\062\064\063\001\002\000\004\007\244" +
    "\001\002\000\004\073\245\001\002\000\004\010\246\001" +
    "\002\000\036\002\uffcd\003\uffcd\004\uffcd\005\uffcd\006\uffcd" +
    "\007\uffcd\011\uffcd\012\uffcd\013\uffcd\017\uffcd\066\uffcd\072" +
    "\uffcd\075\uffcd\076\uffcd\001\002\000\036\002\uffc9\003\uffc9" +
    "\004\uffc9\005\uffc9\006\uffc9\007\uffc9\011\uffc9\012\uffc9\013" +
    "\uffc9\017\uffc9\066\uffc9\072\uffc9\075\uffc9\076\uffc9\001\002" +
    "\000\036\002\uffca\003\uffca\004\uffca\005\uffca\006\uffca\007" +
    "\uffca\011\uffca\012\uffca\013\uffca\017\uffca\066\uffca\072\uffca" +
    "\075\uffca\076\uffca\001\002\000\036\002\uffc5\003\253\004" +
    "\uffc5\005\uffc5\006\uffc5\007\uffc5\011\uffc5\012\uffc5\013\254" +
    "\017\uffc5\066\252\072\uffc5\075\uffc5\076\uffc5\001\002\000" +
    "\032\002\uffc3\003\uffc3\004\uffc3\005\uffc3\006\uffc3\007\uffc3" +
    "\011\uffc3\012\uffc3\017\uffc3\072\uffc3\075\uffc3\076\uffc3\001" +
    "\002\000\032\002\uffc2\003\uffc2\004\uffc2\005\uffc2\006\uffc2" +
    "\007\uffc2\011\uffc2\012\uffc2\017\uffc2\072\uffc2\075\uffc2\076" +
    "\uffc2\001\002\000\032\002\uffc4\003\uffc4\004\uffc4\005\uffc4" +
    "\006\uffc4\007\uffc4\011\uffc4\012\uffc4\017\uffc4\072\uffc4\075" +
    "\uffc4\076\uffc4\001\002\000\032\002\uffcb\003\247\004\uffcb" +
    "\005\uffcb\006\uffcb\007\142\011\uff96\012\uff96\017\uff96\072" +
    "\132\075\uff96\076\uff96\001\002\000\014\002\uffc7\003\uffc7" +
    "\004\uffc7\005\uffc7\006\257\001\002\000\070\002\uffc1\003" +
    "\260\004\uffc1\005\uffc1\007\056\015\uffc1\016\042\017\uffc1" +
    "\020\uffc1\021\uffc1\046\044\047\045\050\035\053\uffc1\055" +
    "\041\056\030\057\054\060\034\061\033\062\uffc1\063\046" +
    "\064\uffc1\067\026\070\037\071\027\073\055\077\043\001" +
    "\002\000\030\002\uffbb\003\uffbb\004\uffbb\005\uffbb\015\uffbb" +
    "\017\uffbb\020\uffbb\021\uffbb\053\uffbb\062\uffbb\064\uffbb\001" +
    "\002\000\030\002\uffa1\003\uffa1\004\uffa1\005\uffa1\015\263" +
    "\017\064\020\061\021\065\053\066\062\062\064\063\001" +
    "\002\000\012\002\uffc8\003\uffc8\004\uffc8\005\uffc8\001\002" +
    "\000\066\002\uffc1\003\057\004\uffc1\005\uffc1\007\056\016" +
    "\042\017\uffc1\020\uffc1\021\uffc1\046\044\047\045\050\035" +
    "\053\uffc1\055\041\056\030\057\054\060\034\061\033\062" +
    "\uffc1\063\046\064\uffc1\067\026\070\037\071\027\073\055" +
    "\077\043\001\002\000\026\002\uffa2\003\uffa2\004\uffa2\005" +
    "\uffa2\017\064\020\061\021\065\053\066\062\062\064\063" +
    "\001\002\000\012\002\000\003\024\004\016\005\011\001" +
    "\002\000\004\002\ufff4\001\002\000\026\002\000\003\024" +
    "\004\016\005\011\017\uffbb\020\uffbb\021\uffbb\053\uffbb\062" +
    "\uffbb\064\uffbb\001\002\000\026\002\000\003\024\004\016" +
    "\005\011\017\064\020\061\021\065\053\066\062\062\064" +
    "\063\001\002\000\004\002\ufff3\001\002\000\004\002\ufff2" +
    "\001\002\000\012\002\000\003\024\004\016\005\011\001" +
    "\002\000\012\002\000\003\024\004\016\005\011\001\002" +
    "\000\004\002\ufff8\001\002\000\004\002\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\274\000\012\003\003\004\020\011\021\012\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\272" +
    "\001\001\000\010\017\030\020\051\021\267\001\001\000" +
    "\004\010\264\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\007\132\013\250\014\247\001\001\000\002\001" +
    "\001\000\004\010\235\001\001\000\012\003\003\004\232" +
    "\011\021\012\012\001\001\000\004\022\223\001\001\000" +
    "\012\017\030\020\051\021\052\030\037\001\001\000\002" +
    "\001\001\000\004\003\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\017\030\020\051\021\222\001\001\000" +
    "\002\001\001\000\012\017\030\020\051\021\052\030\221" +
    "\001\001\000\010\017\030\020\051\021\220\001\001\000" +
    "\010\017\030\020\051\021\217\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\017\030\020\051\021\115\001\001\000\010\017\030" +
    "\020\051\021\114\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\017\030\020\051\021\113" +
    "\001\001\000\012\017\030\020\051\021\105\030\104\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\017\030\020\051\021\057\001" +
    "\001\000\002\001\001\000\010\017\030\020\051\021\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\017" +
    "\030\020\051\021\073\001\001\000\010\017\030\020\051" +
    "\021\072\001\001\000\010\017\030\020\051\021\071\001" +
    "\001\000\010\017\030\020\051\021\070\001\001\000\010" +
    "\017\030\020\051\021\067\001\001\000\010\017\030\020" +
    "\051\021\066\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\017\030\020\051\021\103\001\001\000\010\017\030\020" +
    "\051\021\102\001\001\000\010\017\030\020\051\021\101" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\017\030" +
    "\020\051\021\052\030\112\001\001\000\002\001\001\000" +
    "\012\017\030\020\051\021\052\030\111\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\031\117\001\001\000\004" +
    "\003\213\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\007\132\014\206\017\030\020\051\021\207\001\001" +
    "\000\014\007\132\014\134\017\030\020\051\021\136\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\031\127" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\007\132\014\142\017\030" +
    "\020\051\021\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\132\014\137\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\132\014\142\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\132\014\156\001\001\000\006\007\132\014\155\001" +
    "\001\000\006\007\132\014\154\001\001\000\006\007\132" +
    "\014\153\001\001\000\006\007\132\014\152\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\023\164\024\163\025" +
    "\161\001\001\000\004\026\171\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\023\170\025\161\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\027\175\001\001\000" +
    "\004\026\174\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\132\014\210\001\001\000\002\001\001" +
    "\000\010\017\030\020\051\021\212\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\017\030\020\051\021\052" +
    "\030\215\001\001\000\004\003\216\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\132\014\230\001\001\000" +
    "\002\001\001\000\004\003\227\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\231\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\007\132" +
    "\014\237\017\030\020\051\021\241\001\001\000\004\003" +
    "\236\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\254\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\007\132" +
    "\013\255\014\247\001\001\000\002\001\001\000\012\016" +
    "\261\017\030\020\051\021\260\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\017\030\020" +
    "\051\021\263\001\001\000\002\001\001\000\004\003\265" +
    "\001\001\000\002\001\001\000\004\003\271\001\001\000" +
    "\004\003\270\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\275\001\001\000\004\003\274\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	parseErrors = new ArrayList();

    }


	/** List of parse errors. */
	public List parseErrors;
	
      public ASTRoot ast=new ASTRoot();
	/** This method is called when a syntax error has been detected
	 * and recovery is about to be invoked. This parser adds
	 * the offending token to the parseErrors list. */
	public void syntax_error (java_cup.runtime.Symbol token) {
		parseErrors.add(token);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	/** Returns an empty list. */
	private List list () {return new ArrayList();}
	/** Returns a list containing only the given object. */
	private List list (Object o) {List l = list(); append(l,o); return l;}
	/** Appends the given object to the end of the list. */
	private List append (List l, Object o) {l.add(o); return l;}
	/** Prepends the given object to the beginning of the list. */
	private List prepend (Object o, List l) {l.add(0,o); return l;}
	/** Concatenates two lists. */
	private List concat (List l1, List l2) {l1.addAll(l2); return l1;}
	
	
	

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // link_state ::= KAPPA_LNK error 
            {
              link RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;

              CUP$parser$result = new java_cup.runtime.Symbol(21/*link_state*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // link_state ::= KAPPA_WLD 
            {
              link RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		 RESULT=new LNK_ANY().mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*link_state*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // link_state ::= KAPPA_LNK ID DOT ID 
            {
              link RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String v4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new LNK_TYPE(v2,v4).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*link_state*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // link_state ::= KAPPA_LNK KAPPA_SEMI 
            {
              link RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		 RESULT=new LNK_SOME().mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*link_state*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // link_state ::= KAPPA_LNK INT 
            {
              link RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer v2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new LNK_VALUE(v2).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*link_state*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // link_state ::= 
            {
              link RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		 RESULT=new FREE().mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*link_state*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // internal_state ::= error 
            {
              internal RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;

              CUP$parser$result = new java_cup.runtime.Symbol(20/*internal_state*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // internal_state ::= KAPPA_MRK internal_state 
            {
              internal RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		internal v2 = (internal)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 v2.v1.add(v3); RESULT= v2.mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*internal_state*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // internal_state ::= 
            {
              internal RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		 RESULT=new internal(); 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*internal_state*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // port_expression ::= error 
            {
              port RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*port_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // port_expression ::= ID internal_state link_state 
            {
              port RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		internal v4 = (internal)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		link v3 = (link)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT= new port(v1,v4,v3).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*port_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // port_expression ::= 
            {
              port RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*port_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ne_interface_expression ::= error 
            {
              interface1 RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*ne_interface_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ne_interface_expression ::= port_expression 
            {
              interface1 RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		port v1 = (port)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new PORT_SEP(v1,new EMPTY_INTF()).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*ne_interface_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ne_interface_expression ::= port_expression COMMA ne_interface_expression 
            {
              interface1 RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		port v1 = (port)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		interface1 v3 = (interface1)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new PORT_SEP(v1,v3).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*ne_interface_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ne_interface_expression ::= 
            {
              interface1 RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*ne_interface_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // interface_expression ::= error 
            {
              interface1 RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*interface_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // interface_expression ::= ne_interface_expression 
            {
              interface1 RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		interface1 v1 = (interface1)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=v1; 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*interface_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // interface_expression ::= 
            {
              interface1 RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		 RESULT=new EMPTY_INTF().mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*interface_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // agent_expression ::= error 
            {
              agent RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*agent_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // agent_expression ::= ID 
            {
              agent RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new agent(v1,new EMPTY_INTF()).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*agent_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // agent_expression ::= ID OP_PAR interface_expression CL_PAR 
            {
              agent RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		interface1 v3 = (interface1)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new agent(v1,v3).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*agent_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // agent_expression ::= 
            {
              agent RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*agent_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // non_empty_mixture ::= error 
            {
              mixture RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*non_empty_mixture*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // non_empty_mixture ::= agent_expression 
            {
              mixture RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		agent v1 = (agent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new COMMA(v1,new EMPTY_MIX()).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*non_empty_mixture*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // non_empty_mixture ::= agent_expression PLUS_RADIUS non_empty_mixture 
            {
              mixture RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		agent v1 = (agent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer v2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		mixture v3 = (mixture)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new PLUS(v2,v1,v3).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*non_empty_mixture*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // non_empty_mixture ::= agent_expression PLUS non_empty_mixture 
            {
              mixture RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		agent v1 = (agent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		mixture v3 = (mixture)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new PLUS(-1,v1,v3).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*non_empty_mixture*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // non_empty_mixture ::= agent_expression DOT_RADIUS non_empty_mixture 
            {
              mixture RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		agent v1 = (agent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer v2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		mixture v3 = (mixture)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new DOT(v2,v1,v3).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*non_empty_mixture*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // non_empty_mixture ::= agent_expression DOT non_empty_mixture 
            {
              mixture RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		agent v1 = (agent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		mixture v3 = (mixture)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new DOT(-1,v1,v3).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*non_empty_mixture*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // non_empty_mixture ::= agent_expression COMMA non_empty_mixture 
            {
              mixture RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		agent v1 = (agent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		mixture v3 = (mixture)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new COMMA(v1,v3).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*non_empty_mixture*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // non_empty_mixture ::= OP_PAR non_empty_mixture CL_PAR 
            {
              mixture RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		mixture v2 = (mixture)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=v2;
              CUP$parser$result = new java_cup.runtime.Symbol(10/*non_empty_mixture*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // non_empty_mixture ::= 
            {
              mixture RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*non_empty_mixture*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // rate ::= error 
            {
              rate RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*rate*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // rate ::= alg_expr 
            {
              rate RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		alg_expr v1 = (alg_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new rate(v1).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*rate*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // rate ::= alg_expr PIPE alg_expr 
            {
              rate RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		alg_expr v1 = (alg_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		alg_expr v3 = (alg_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new rate(v1,v3).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*rate*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // rate ::= 
            {
              rate RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*rate*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // alg_expr ::= error 
            {
              alg_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*alg_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // alg_expr ::= LOG alg_expr 
            {
              alg_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		alg_expr v2 = (alg_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new LOG(v2).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*alg_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // alg_expr ::= SQRT alg_expr 
            {
              alg_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		alg_expr v2 = (alg_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new SQRT(v2).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*alg_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // alg_expr ::= ABS alg_expr 
            {
              alg_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		alg_expr v2 = (alg_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new ABS(v2).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*alg_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // alg_expr ::= TAN alg_expr 
            {
              alg_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		alg_expr v2 = (alg_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new TAN(v2).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*alg_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // alg_expr ::= COSINUS alg_expr 
            {
              alg_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		alg_expr v2 = (alg_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new COSINUS(v2).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*alg_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // alg_expr ::= SINUS alg_expr 
            {
              alg_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		alg_expr v2 = (alg_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new SINUS(v2).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*alg_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // alg_expr ::= EXPONENT alg_expr 
            {
              alg_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		alg_expr v2 = (alg_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new EXP(v2).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*alg_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // alg_expr ::= alg_expr MODULO alg_expr 
            {
              alg_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		alg_expr v1 = (alg_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		alg_expr v3 = (alg_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new SUM(v1,v3).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*alg_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // alg_expr ::= alg_expr POW alg_expr 
            {
              alg_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		alg_expr v1 = (alg_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		alg_expr v3 = (alg_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new SUM(v1,v3).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*alg_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // alg_expr ::= alg_expr MINUS alg_expr 
            {
              alg_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		alg_expr v1 = (alg_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		alg_expr v3 = (alg_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new SUM(v1,v3).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*alg_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // alg_expr ::= alg_expr DIV alg_expr 
            {
              alg_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		alg_expr v1 = (alg_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		alg_expr v3 = (alg_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new DIV(v1,v3).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*alg_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // alg_expr ::= alg_expr PLUS alg_expr 
            {
              alg_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		alg_expr v1 = (alg_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		alg_expr v3 = (alg_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new SUM(v1,v3).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*alg_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // alg_expr ::= alg_expr MULT alg_expr 
            {
              alg_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		alg_expr v1 = (alg_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		alg_expr v3 = (alg_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new MULT(v1,v3).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*alg_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // alg_expr ::= variable 
            {
              alg_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		alg_expr v2 = (alg_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=v2;
              CUP$parser$result = new java_cup.runtime.Symbol(15/*alg_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // alg_expr ::= constant 
            {
              alg_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		alg_expr v2 = (alg_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=v2;
              CUP$parser$result = new java_cup.runtime.Symbol(15/*alg_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // alg_expr ::= OP_PAR alg_expr CL_PAR 
            {
              alg_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		alg_expr v2 = (alg_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=v2;
              CUP$parser$result = new java_cup.runtime.Symbol(15/*alg_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // alg_expr ::= 
            {
              alg_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*alg_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // variable ::= error 
            {
              alg_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*variable*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // variable ::= EVENT 
            {
              alg_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		 RESULT= new EVENT_VAR().mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*variable*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // variable ::= TIME 
            {
              alg_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		 RESULT= new TIME_VAR().mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*variable*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // variable ::= LABEL 
            {
              alg_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT= new OBS_VAR(v1).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*variable*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // variable ::= 
            {
              alg_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*variable*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // constant ::= error 
            {
              alg_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*constant*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // constant ::= TMAX 
            {
              alg_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		 RESULT= new TMAX().mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*constant*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // constant ::= EMAX 
            {
              alg_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		 RESULT= new EMAX().mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*constant*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // constant ::= INT 
            {
              alg_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer v1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT= new FLOAT((float)v1).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*constant*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // constant ::= FLOAT 
            {
              alg_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Float v1 = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT= new FLOAT(v1).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*constant*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // constant ::= INFINITY 
            {
              alg_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		 RESULT= new INFINITY().mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*constant*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // constant ::= 
            {
              alg_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*constant*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // arrow ::= error 
            {
              arrow RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*arrow*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // arrow ::= KAPPA_NOPOLY 
            {
              arrow RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		 RESULT= new RAR_NOPOLY().mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*arrow*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // arrow ::= KAPPA_RAR 
            {
              arrow RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RESULT= new RAR().mark(left,right);
              CUP$parser$result = new java_cup.runtime.Symbol(11/*arrow*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // arrow ::= 
            {
              arrow RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*arrow*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // rule_expression ::= error 
            {
              Rules RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*rule_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // rule_expression ::= rule_label mixture arrow mixture 
            {
              Rules RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		rule_label v1 = (rule_label)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		mixture v2 = (mixture)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arrow v3 = (arrow)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		mixture v4 = (mixture)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new Rules(v1,new rule(v2,v3,v4,new FLOAT(1.0f))).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*rule_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // rule_expression ::= rule_label mixture arrow mixture AT rate 
            {
              Rules RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		rule_label v1 = (rule_label)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		mixture v2 = (mixture)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		arrow v3 = (arrow)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		mixture v4 = (mixture)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		rate v5 = (rate)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new Rules(v1,new rule(v2,v3,v4,v5.v11,v5.v12)).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*rule_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // mixture ::= error 
            {
              mixture RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*mixture*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // mixture ::= non_empty_mixture 
            {
              mixture RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		mixture v1 = (mixture)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=v1; 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*mixture*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // mixture ::= 
            {
              mixture RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		 RESULT= new EMPTY_MIX().mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*mixture*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // rule_label ::= error 
            {
              rule_label RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*rule_label*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // rule_label ::= REF LABEL OP_PAR LABEL CL_PAR 
            {
              rule_label RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new rule_label(v4,v2).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*rule_label*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // rule_label ::= LABEL 
            {
              rule_label RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new rule_label(v1).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*rule_label*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // rule_label ::= 
            {
              rule_label RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		 RESULT=new rule_label().mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*rule_label*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // multiple ::= error 
            {
              alg_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*multiple*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // multiple ::= LABEL 
            {
              alg_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new OBS_VAR(v1).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*multiple*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // multiple ::= INT 
            {
              alg_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer v1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new FLOAT((float) v1).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*multiple*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // multiple ::= 
            {
              alg_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		 RESULT=new FLOAT(1.0f); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*multiple*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // modif_expr ::= error 
            {
              modif_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;

              CUP$parser$result = new java_cup.runtime.Symbol(23/*modif_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // modif_expr ::= STOP 
            {
              modif_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		 RESULT=new STOP(); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*modif_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // modif_expr ::= SNAPSHOT 
            {
              modif_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		 RESULT=new SNAPSHOT(); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*modif_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // modif_expr ::= LABEL SET alg_expr 
            {
              modif_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		alg_expr v3 = (alg_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new UPDATE(v1,v3); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*modif_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // modif_expr ::= DELETE non_empty_mixture 
            {
              modif_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		mixture v2 = (mixture)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new DELETE(new FLOAT(1.0f),v2); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*modif_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // modif_expr ::= DELETE alg_expr non_empty_mixture 
            {
              modif_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		alg_expr v1 = (alg_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		mixture v2 = (mixture)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new DELETE(v1,v2); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*modif_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // modif_expr ::= INTRO error 
            {
              modif_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;

              CUP$parser$result = new java_cup.runtime.Symbol(23/*modif_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // modif_expr ::= INTRO non_empty_mixture 
            {
              modif_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		mixture v2 = (mixture)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new INTRO(new FLOAT(1.0f),v2); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*modif_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // modif_expr ::= INTRO alg_expr non_empty_mixture 
            {
              modif_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		alg_expr v1 = (alg_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		mixture v2 = (mixture)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new INTRO(v1,v2); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*modif_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // modif_expr ::= OP_PAR modif_expr CL_PAR 
            {
              modif_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		modif_expr v2 = (modif_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=v2; 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*modif_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // modif_expr ::= 
            {
              modif_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;

              CUP$parser$result = new java_cup.runtime.Symbol(23/*modif_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // bool_expr ::= error 
            {
              bool_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*bool_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // bool_expr ::= FALSE 
            {
              bool_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		 RESULT=new FALSE(); 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*bool_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // bool_expr ::= TRUE 
            {
              bool_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		 RESULT=new TRUE(); 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*bool_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // bool_expr ::= NOT bool_expr 
            {
              bool_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		bool_expr v1 = (bool_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new NOT(v1); 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*bool_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // bool_expr ::= alg_expr EQUAL alg_expr 
            {
              bool_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		alg_expr v1 = (alg_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		alg_expr v2 = (alg_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new EQUAL(v1,v2); 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*bool_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // bool_expr ::= alg_expr SMALLER alg_expr 
            {
              bool_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		alg_expr v1 = (alg_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		alg_expr v2 = (alg_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new SMALLER(v1,v2); 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*bool_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // bool_expr ::= alg_expr GREATER alg_expr 
            {
              bool_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		alg_expr v1 = (alg_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		alg_expr v2 = (alg_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new GREATER(v1,v2); 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*bool_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // bool_expr ::= bool_expr OR bool_expr 
            {
              bool_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bool_expr v1 = (bool_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		bool_expr v2 = (bool_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new OR(v1,v2); 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*bool_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // bool_expr ::= bool_expr AND bool_expr 
            {
              bool_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bool_expr v1 = (bool_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		bool_expr v2 = (bool_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new AND(v1,v2); 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*bool_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // bool_expr ::= OP_PAR bool_expr CL_PAR 
            {
              bool_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bool_expr v1 = (bool_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=v1; 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*bool_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // bool_expr ::= 
            {
              bool_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*bool_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // variable_declaration ::= error 
            {
              Variables RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*variable_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // variable_declaration ::= LABEL error 
            {
              Variables RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		
              CUP$parser$result = new java_cup.runtime.Symbol(6/*variable_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // variable_declaration ::= LABEL alg_expr 
            {
              Variables RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		alg_expr v2 = (alg_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new VAR_ALG(v2,v1).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*variable_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // variable_declaration ::= LABEL non_empty_mixture 
            {
              Variables RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		mixture v2 = (mixture)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new VAR_KAPPA(v2,v1).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*variable_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // variable_declaration ::= 
            {
              Variables RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*variable_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // start_rule ::= error 
            {
              Object RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*start_rule*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // start_rule ::= PERT bool_expr DO modif_expr UNTIL bool_expr newline 
            {
              Object RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		bool_expr v2 = (bool_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		modif_expr v4 = (modif_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bool_expr v5 = (bool_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  parser.ast.addPer(new pertubation(v2,v4,v5)); RESULT=v3;
              CUP$parser$result = new java_cup.runtime.Symbol(2/*start_rule*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // start_rule ::= PERT bool_expr DO modif_expr newline 
            {
              Object RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		bool_expr v2 = (bool_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		modif_expr v4 = (modif_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.ast.addPer(new pertubation(v2,v4)); RESULT=v3; 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*start_rule*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // start_rule ::= PLOT error newline 
            {
              Object RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=v2; 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*start_rule*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // start_rule ::= PLOT alg_expr newline 
            {
              Object RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		alg_expr v2 = (alg_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.ast.addObs(new Observables((OBS_VAR)v2)); RESULT=v3; 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*start_rule*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // start_rule ::= OBS variable_declaration newline 
            {
              Object RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Variables v2 = (Variables)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.ast.addVar(v2); parser.ast.addObs(new Observables(new OBS_VAR(v2.name))); RESULT=v3; 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*start_rule*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // start_rule ::= LET variable_declaration newline 
            {
              Object RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Variables v2 = (Variables)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.ast.addVar(v2); RESULT=v3; 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*start_rule*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // start_rule ::= INIT error newline 
            {
              Object RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=v2; 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*start_rule*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // start_rule ::= INIT multiple non_empty_mixture newline 
            {
              Object RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		alg_expr v2 = (alg_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		mixture v3 = (mixture)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.ast.addInit(new Init(v2,v3).mark(left,right)); RESULT=v4; 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*start_rule*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // start_rule ::= SIGNATURE error newline 
            {
              Object RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=v2; 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*start_rule*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // start_rule ::= SIGNATURE agent_expression newline 
            {
              Object RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		agent v2 = (agent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.ast.addSig(new Signatures(v2)); RESULT=v3; 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*start_rule*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // start_rule ::= rule_expression newline 
            {
              Object RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Rules v1 = (Rules)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.ast.addRul(v1); RESULT=v2; 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*start_rule*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // start_rule ::= newline 
            {
              Object RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = n; 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*start_rule*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // start_rule ::= 
            {
              Object RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*start_rule*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // newline ::= error 
            {
              Object RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*newline*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // newline ::= EOF1 
            {
              Object RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*newline*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // newline ::= NEWLINE start_rule 
            {
              Object RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=s; 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*newline*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // newline ::= 
            {
              Object RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*newline*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= start_rule EOF 
            {
              Object RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

