
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Fri Jul 22 15:22:36 CEST 2011
//----------------------------------------------------

package fr.jussieu.pps.kappa.core.parse;

import fr.jussieu.pps.kappa.core.parse.ast.*;
import java.util.List;
import java.util.ArrayList;

/** CUP v0.10k generated parser.
  * @version Fri Jul 22 15:22:36 CEST 2011
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\141\000\002\002\004\000\002\003\002\000\002\003" +
    "\004\000\002\003\003\000\002\004\002\000\002\004\003" +
    "\000\002\004\004\000\002\004\005\000\002\004\005\000" +
    "\002\004\006\000\002\004\005\000\002\004\005\000\002" +
    "\004\005\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\007\000\002\004\011\000\002\004\004" +
    "\000\002\010\004\000\002\010\004\000\002\030\005\000" +
    "\002\030\005\000\002\030\005\000\002\030\005\000\002" +
    "\030\005\000\002\030\005\000\002\030\004\000\002\030" +
    "\003\000\002\030\003\000\002\031\005\000\002\031\005" +
    "\000\002\031\004\000\002\031\005\000\002\031\004\000" +
    "\002\031\005\000\002\031\003\000\002\031\003\000\002" +
    "\022\002\000\002\022\003\000\002\022\003\000\002\012" +
    "\002\000\002\012\003\000\002\012\007\000\002\013\002" +
    "\000\002\013\003\000\002\011\010\000\002\011\006\000" +
    "\002\015\003\000\002\015\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\021\005\000\002\021\003\000\002\021\003\000" +
    "\002\021\005\000\002\021\005\000\002\021\005\000\002" +
    "\021\005\000\002\021\005\000\002\021\005\000\002\021" +
    "\004\000\002\021\004\000\002\021\004\000\002\021\004" +
    "\000\002\021\004\000\002\021\004\000\002\021\004\000" +
    "\002\016\005\000\002\016\003\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\014" +
    "\005\000\002\014\005\000\002\014\003\000\002\007\006" +
    "\000\002\007\003\000\002\024\002\000\002\024\003\000" +
    "\002\023\005\000\002\023\003\000\002\025\005\000\002" +
    "\026\002\000\002\026\004\000\002\027\002\000\002\027" +
    "\004\000\002\027\004\000\002\027\006\000\002\027\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\257\000\042\002\000\003\013\004\015\005\012\007" +
    "\uffd8\013\uffd8\030\020\041\014\042\010\045\006\051\017" +
    "\052\016\054\007\066\uffd8\072\uffd8\073\005\001\002\000" +
    "\004\002\ufffc\001\002\000\012\007\uffd7\013\uffd7\066\uffd7" +
    "\072\uffd7\001\002\000\006\003\256\072\125\001\002\000" +
    "\044\003\252\007\054\016\041\046\043\047\044\050\034" +
    "\055\037\056\026\057\052\060\033\061\032\063\045\067" +
    "\025\070\036\071\030\073\053\077\042\001\002\000\006" +
    "\003\246\073\220\001\002\000\012\007\133\013\uffd5\066" +
    "\uffd5\072\125\001\002\000\004\002\ufffe\001\002\000\010" +
    "\002\000\004\015\005\012\001\002\000\004\073\226\001" +
    "\002\000\042\002\000\003\013\004\015\005\012\007\uffd8" +
    "\013\uffd8\030\020\041\014\042\010\045\006\051\017\052" +
    "\016\054\007\066\uffd8\072\uffd8\073\005\001\002\000\004" +
    "\073\220\001\002\000\014\003\213\007\uffdb\071\214\072" +
    "\uffdb\073\212\001\002\000\050\007\046\016\041\027\031" +
    "\036\035\037\047\046\043\047\044\050\034\055\037\056" +
    "\026\057\052\060\033\061\032\063\045\067\025\070\036" +
    "\071\030\073\053\077\042\001\002\000\004\002\024\001" +
    "\002\000\010\002\000\004\015\005\012\001\002\000\004" +
    "\002\ufffb\001\002\000\004\002\001\001\002\000\052\002" +
    "\uffcc\004\uffcc\005\uffcc\007\uffcc\010\uffcc\015\uffcc\017\uffcc" +
    "\020\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026" +
    "\uffcc\034\uffcc\035\uffcc\053\uffcc\062\uffcc\064\uffcc\072\uffcc" +
    "\001\002\000\042\007\054\016\041\046\043\047\044\050" +
    "\034\055\037\056\026\057\052\060\033\061\032\063\045" +
    "\067\025\070\036\071\030\073\053\077\042\001\002\000" +
    "\052\002\uffc6\004\uffc6\005\uffc6\007\uffc6\010\uffc6\015\uffc6" +
    "\017\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6\025" +
    "\uffc6\026\uffc6\034\uffc6\035\uffc6\053\uffc6\062\uffc6\064\uffc6" +
    "\072\uffc6\001\002\000\052\002\uffcd\004\uffcd\005\uffcd\007" +
    "\uffcd\010\uffcd\015\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd" +
    "\023\uffcd\024\uffcd\025\uffcd\026\uffcd\034\uffcd\035\uffcd\053" +
    "\uffcd\062\uffcd\064\uffcd\072\uffcd\001\002\000\050\007\046" +
    "\016\041\027\031\036\035\037\047\046\043\047\044\050" +
    "\034\055\037\056\026\057\052\060\033\061\032\063\045" +
    "\067\025\070\036\071\030\073\053\077\042\001\002\000" +
    "\042\007\054\016\041\046\043\047\044\050\034\055\037" +
    "\056\026\057\052\060\033\061\032\063\045\067\025\070" +
    "\036\071\030\073\053\077\042\001\002\000\042\007\054" +
    "\016\041\046\043\047\044\050\034\055\037\056\026\057" +
    "\052\060\033\061\032\063\045\067\025\070\036\071\030" +
    "\073\053\077\042\001\002\000\052\002\uffc8\004\uffc8\005" +
    "\uffc8\007\uffc8\010\uffc8\015\uffc8\017\uffc8\020\uffc8\021\uffc8" +
    "\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\034\uffc8\035" +
    "\uffc8\053\uffc8\062\uffc8\064\uffc8\072\uffc8\001\002\000\020" +
    "\002\uffe5\004\uffe5\005\uffe5\010\uffe5\022\uffe5\023\uffe5\034" +
    "\uffe5\001\002\000\052\002\uffcb\004\uffcb\005\uffcb\007\uffcb" +
    "\010\uffcb\015\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb\023" +
    "\uffcb\024\uffcb\025\uffcb\026\uffcb\034\uffcb\035\uffcb\053\uffcb" +
    "\062\uffcb\064\uffcb\072\uffcb\001\002\000\042\007\054\016" +
    "\041\046\043\047\044\050\034\055\037\056\026\057\052" +
    "\060\033\061\032\063\045\067\025\070\036\071\030\073" +
    "\053\077\042\001\002\000\010\022\104\023\106\034\113" +
    "\001\002\000\042\007\054\016\041\046\043\047\044\050" +
    "\034\055\037\056\026\057\052\060\033\061\032\063\045" +
    "\067\025\070\036\071\030\073\053\077\042\001\002\000" +
    "\052\002\uffce\004\uffce\005\uffce\007\uffce\010\uffce\015\uffce" +
    "\017\uffce\020\uffce\021\uffce\022\uffce\023\uffce\024\uffce\025" +
    "\uffce\026\uffce\034\uffce\035\uffce\053\uffce\062\uffce\064\uffce" +
    "\072\uffce\001\002\000\052\002\uffcf\004\uffcf\005\uffcf\007" +
    "\uffcf\010\uffcf\015\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf" +
    "\023\uffcf\024\uffcf\025\uffcf\026\uffcf\034\uffcf\035\uffcf\053" +
    "\uffcf\062\uffcf\064\uffcf\072\uffcf\001\002\000\052\002\uffc9" +
    "\004\uffc9\005\uffc9\007\uffc9\010\uffc9\015\uffc9\017\uffc9\020" +
    "\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9" +
    "\034\uffc9\035\uffc9\053\uffc9\062\uffc9\064\uffc9\072\uffc9\001" +
    "\002\000\042\007\054\016\041\046\043\047\044\050\034" +
    "\055\037\056\026\057\052\060\033\061\032\063\045\067" +
    "\025\070\036\071\030\073\053\077\042\001\002\000\050" +
    "\007\046\016\041\027\031\036\035\037\047\046\043\047" +
    "\044\050\034\055\037\056\026\057\052\060\033\061\032" +
    "\063\045\067\025\070\036\071\030\073\053\077\042\001" +
    "\002\000\020\002\uffe4\004\uffe4\005\uffe4\010\uffe4\022\uffe4" +
    "\023\uffe4\034\uffe4\001\002\000\052\002\uffc5\004\uffc5\005" +
    "\uffc5\007\uffc5\010\uffc5\015\uffc5\017\uffc5\020\uffc5\021\uffc5" +
    "\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\034\uffc5\035" +
    "\uffc5\053\uffc5\062\uffc5\064\uffc5\072\uffc5\001\002\000\024" +
    "\017\061\020\056\021\062\024\075\025\074\026\076\053" +
    "\063\062\057\064\060\001\002\000\042\007\054\016\041" +
    "\046\043\047\044\050\034\055\037\056\026\057\052\060" +
    "\033\061\032\063\045\067\025\070\036\071\030\073\053" +
    "\077\042\001\002\000\052\002\uffca\004\uffca\005\uffca\007" +
    "\uffca\010\uffca\015\uffca\017\uffca\020\uffca\021\uffca\022\uffca" +
    "\023\uffca\024\uffca\025\uffca\026\uffca\034\uffca\035\uffca\053" +
    "\uffca\062\uffca\064\uffca\072\uffca\001\002\000\042\007\054" +
    "\016\041\046\043\047\044\050\034\055\037\056\026\057" +
    "\052\060\033\061\032\063\045\067\025\070\036\071\030" +
    "\073\053\077\042\001\002\000\052\002\uffbb\004\uffbb\005" +
    "\uffbb\007\uffbb\010\uffbb\015\uffbb\017\uffbb\020\uffbb\021\uffbb" +
    "\022\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb\034\uffbb\035" +
    "\uffbb\053\uffbb\062\uffbb\064\uffbb\072\uffbb\001\002\000\042" +
    "\007\054\016\041\046\043\047\044\050\034\055\037\056" +
    "\026\057\052\060\033\061\032\063\045\067\025\070\036" +
    "\071\030\073\053\077\042\001\002\000\042\007\054\016" +
    "\041\046\043\047\044\050\034\055\037\056\026\057\052" +
    "\060\033\061\032\063\045\067\025\070\036\071\030\073" +
    "\053\077\042\001\002\000\042\007\054\016\041\046\043" +
    "\047\044\050\034\055\037\056\026\057\052\060\033\061" +
    "\032\063\045\067\025\070\036\071\030\073\053\077\042" +
    "\001\002\000\042\007\054\016\041\046\043\047\044\050" +
    "\034\055\037\056\026\057\052\060\033\061\032\063\045" +
    "\067\025\070\036\071\030\073\053\077\042\001\002\000" +
    "\042\007\054\016\041\046\043\047\044\050\034\055\037" +
    "\056\026\057\052\060\033\061\032\063\045\067\025\070" +
    "\036\071\030\073\053\077\042\001\002\000\042\007\054" +
    "\016\041\046\043\047\044\050\034\055\037\056\026\057" +
    "\052\060\033\061\032\063\045\067\025\070\036\071\030" +
    "\073\053\077\042\001\002\000\052\002\uffc2\004\uffc2\005" +
    "\uffc2\007\uffc2\010\uffc2\015\uffc2\017\uffc2\020\uffc2\021\uffc2" +
    "\022\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\034\uffc2\035" +
    "\uffc2\053\uffc2\062\057\064\060\072\uffc2\001\002\000\052" +
    "\002\uffc1\004\uffc1\005\uffc1\007\uffc1\010\uffc1\015\uffc1\017" +
    "\uffc1\020\056\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1" +
    "\026\uffc1\034\uffc1\035\uffc1\053\063\062\057\064\060\072" +
    "\uffc1\001\002\000\052\002\uffc3\004\uffc3\005\uffc3\007\uffc3" +
    "\010\uffc3\015\uffc3\017\uffc3\020\056\021\uffc3\022\uffc3\023" +
    "\uffc3\024\uffc3\025\uffc3\026\uffc3\034\uffc3\035\uffc3\053\063" +
    "\062\057\064\060\072\uffc3\001\002\000\052\002\uffbf\004" +
    "\uffbf\005\uffbf\007\uffbf\010\uffbf\015\uffbf\017\uffbf\020\uffbf" +
    "\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\034" +
    "\uffbf\035\uffbf\053\uffbf\062\057\064\uffbf\072\uffbf\001\002" +
    "\000\052\002\uffc0\004\uffc0\005\uffc0\007\uffc0\010\uffc0\015" +
    "\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0" +
    "\025\uffc0\026\uffc0\034\uffc0\035\uffc0\053\uffc0\062\057\064" +
    "\uffc0\072\uffc0\001\002\000\052\002\uffc4\004\uffc4\005\uffc4" +
    "\007\uffc4\010\uffc4\015\uffc4\017\uffc4\020\uffc4\021\uffc4\022" +
    "\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\034\uffc4\035\uffc4" +
    "\053\uffc4\062\057\064\060\072\uffc4\001\002\000\020\010" +
    "\073\017\061\020\056\021\062\053\063\062\057\064\060" +
    "\001\002\000\052\002\uffc7\004\uffc7\005\uffc7\007\uffc7\010" +
    "\uffc7\015\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7" +
    "\024\uffc7\025\uffc7\026\uffc7\034\uffc7\035\uffc7\053\uffc7\062" +
    "\uffc7\064\uffc7\072\uffc7\001\002\000\042\007\054\016\041" +
    "\046\043\047\044\050\034\055\037\056\026\057\052\060" +
    "\033\061\032\063\045\067\025\070\036\071\030\073\053" +
    "\077\042\001\002\000\042\007\054\016\041\046\043\047" +
    "\044\050\034\055\037\056\026\057\052\060\033\061\032" +
    "\063\045\067\025\070\036\071\030\073\053\077\042\001" +
    "\002\000\042\007\054\016\041\046\043\047\044\050\034" +
    "\055\037\056\026\057\052\060\033\061\032\063\045\067" +
    "\025\070\036\071\030\073\053\077\042\001\002\000\034" +
    "\002\uffe7\004\uffe7\005\uffe7\010\uffe7\017\061\020\056\021" +
    "\062\022\uffe7\023\uffe7\034\uffe7\053\063\062\057\064\060" +
    "\001\002\000\034\002\uffe9\004\uffe9\005\uffe9\010\uffe9\017" +
    "\061\020\056\021\062\022\uffe9\023\uffe9\034\uffe9\053\063" +
    "\062\057\064\060\001\002\000\034\002\uffe8\004\uffe8\005" +
    "\uffe8\010\uffe8\017\061\020\056\021\062\022\uffe8\023\uffe8" +
    "\034\uffe8\053\063\062\057\064\060\001\002\000\010\010" +
    "\105\022\104\023\106\001\002\000\026\010\073\017\061" +
    "\020\056\021\062\024\075\025\074\026\076\053\063\062" +
    "\057\064\060\001\002\000\050\007\046\016\041\027\031" +
    "\036\035\037\047\046\043\047\044\050\034\055\037\056" +
    "\026\057\052\060\033\061\032\063\045\067\025\070\036" +
    "\071\030\073\053\077\042\001\002\000\020\002\uffec\004" +
    "\uffec\005\uffec\010\uffec\022\uffec\023\uffec\034\uffec\001\002" +
    "\000\050\007\046\016\041\027\031\036\035\037\047\046" +
    "\043\047\044\050\034\055\037\056\026\057\052\060\033" +
    "\061\032\063\045\067\025\070\036\071\030\073\053\077" +
    "\042\001\002\000\020\002\uffea\004\uffea\005\uffea\010\uffea" +
    "\022\104\023\uffea\034\uffea\001\002\000\020\002\uffeb\004" +
    "\uffeb\005\uffeb\010\uffeb\022\uffeb\023\uffeb\034\uffeb\001\002" +
    "\000\052\002\uffba\004\uffba\005\uffba\007\uffba\010\uffba\015" +
    "\uffba\017\uffba\020\uffba\021\uffba\022\uffba\023\uffba\024\uffba" +
    "\025\uffba\026\uffba\034\uffba\035\uffba\053\uffba\062\uffba\064" +
    "\uffba\072\uffba\001\002\000\052\002\uffb8\004\uffb8\005\uffb8" +
    "\007\uffb8\010\uffb8\015\uffb8\017\uffb8\020\uffb8\021\uffb8\022" +
    "\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8\034\uffb8\035\uffb8" +
    "\053\uffb8\062\uffb8\064\uffb8\072\uffb8\001\002\000\016\007" +
    "\122\031\117\032\116\040\120\065\121\073\115\001\002" +
    "\000\012\002\000\004\015\005\012\035\201\001\002\000" +
    "\004\033\176\001\002\000\044\007\130\016\041\046\043" +
    "\047\044\050\034\055\037\056\026\057\052\060\033\061" +
    "\032\063\045\067\025\070\036\071\030\072\125\073\053" +
    "\077\042\001\002\000\044\007\130\016\041\046\043\047" +
    "\044\050\034\055\037\056\026\057\052\060\033\061\032" +
    "\063\045\067\025\070\036\071\030\072\125\073\053\077" +
    "\042\001\002\000\014\002\uffdd\004\uffdd\005\uffdd\010\uffdd" +
    "\035\uffdd\001\002\000\014\002\uffdc\004\uffdc\005\uffdc\010" +
    "\uffdc\035\uffdc\001\002\000\016\007\122\031\117\032\116" +
    "\040\120\065\121\073\115\001\002\000\004\010\124\001" +
    "\002\000\014\002\uffe3\004\uffe3\005\uffe3\010\uffe3\035\uffe3" +
    "\001\002\000\036\002\uffad\004\uffad\005\uffad\006\uffad\007" +
    "\150\010\uffad\011\uffad\012\uffad\013\uffad\017\uffad\035\uffad" +
    "\066\uffad\075\uffad\076\uffad\001\002\000\034\002\uffaf\004" +
    "\uffaf\005\uffaf\006\uffaf\010\uffaf\011\136\012\142\013\uffaf" +
    "\017\140\035\uffaf\066\uffaf\075\141\076\137\001\002\000" +
    "\014\002\uffe1\004\uffe1\005\uffe1\010\uffe1\035\uffe1\001\002" +
    "\000\044\007\130\016\041\046\043\047\044\050\034\055" +
    "\037\056\026\057\052\060\033\061\032\063\045\067\025" +
    "\070\036\071\030\072\125\073\053\077\042\001\002\000" +
    "\022\007\133\017\061\020\056\021\062\053\063\062\057" +
    "\064\060\072\125\001\002\000\014\002\uffe2\004\uffe2\005" +
    "\uffe2\010\uffe2\035\uffe2\001\002\000\006\007\133\072\125" +
    "\001\002\000\004\010\135\001\002\000\022\002\uffb5\004" +
    "\uffb5\005\uffb5\006\uffb5\010\uffb5\013\uffb5\035\uffb5\066\uffb5" +
    "\001\002\000\006\007\133\072\125\001\002\000\006\007" +
    "\133\072\125\001\002\000\006\007\133\072\125\001\002" +
    "\000\006\007\133\072\125\001\002\000\006\007\133\072" +
    "\125\001\002\000\022\002\uffb3\004\uffb3\005\uffb3\006\uffb3" +
    "\010\uffb3\013\uffb3\035\uffb3\066\uffb3\001\002\000\022\002" +
    "\uffb2\004\uffb2\005\uffb2\006\uffb2\010\uffb2\013\uffb2\035\uffb2" +
    "\066\uffb2\001\002\000\022\002\uffb1\004\uffb1\005\uffb1\006" +
    "\uffb1\010\uffb1\013\uffb1\035\uffb1\066\uffb1\001\002\000\022" +
    "\002\uffb0\004\uffb0\005\uffb0\006\uffb0\010\uffb0\013\uffb0\035" +
    "\uffb0\066\uffb0\001\002\000\022\002\uffb4\004\uffb4\005\uffb4" +
    "\006\uffb4\010\uffb4\013\uffb4\035\uffb4\066\uffb4\001\002\000" +
    "\006\010\uffac\072\151\001\002\000\014\010\uffa7\011\uffa7" +
    "\014\uffa7\043\uffa7\074\160\001\002\000\006\010\uffa9\011" +
    "\156\001\002\000\004\010\155\001\002\000\004\010\uffab" +
    "\001\002\000\034\002\uffae\004\uffae\005\uffae\006\uffae\010" +
    "\uffae\011\uffae\012\uffae\013\uffae\017\uffae\035\uffae\066\uffae" +
    "\075\uffae\076\uffae\001\002\000\004\072\151\001\002\000" +
    "\004\010\uffaa\001\002\000\014\010\uffa7\011\uffa7\014\uffa7" +
    "\043\uffa7\074\160\001\002\000\012\010\uffa5\011\uffa5\014" +
    "\163\043\164\001\002\000\006\010\uffa8\011\uffa8\001\002" +
    "\000\010\044\166\071\167\072\165\001\002\000\006\010" +
    "\uffa1\011\uffa1\001\002\000\004\012\170\001\002\000\006" +
    "\010\uffa3\011\uffa3\001\002\000\006\010\uffa4\011\uffa4\001" +
    "\002\000\004\072\171\001\002\000\006\010\uffa2\011\uffa2" +
    "\001\002\000\012\010\uffa6\011\uffa6\014\uffa6\043\uffa6\001" +
    "\002\000\014\002\uffdf\004\uffdf\005\uffdf\010\uffdf\035\uffdf" +
    "\001\002\000\022\007\133\017\061\020\056\021\062\053" +
    "\063\062\057\064\060\072\125\001\002\000\014\002\uffe0" +
    "\004\uffe0\005\uffe0\010\uffe0\035\uffe0\001\002\000\042\007" +
    "\054\016\041\046\043\047\044\050\034\055\037\056\026" +
    "\057\052\060\033\061\032\063\045\067\025\070\036\071" +
    "\030\073\053\077\042\001\002\000\030\002\uffde\004\uffde" +
    "\005\uffde\010\uffde\017\061\020\056\021\062\035\uffde\053" +
    "\063\062\057\064\060\001\002\000\004\002\ufff1\001\002" +
    "\000\050\007\046\016\041\027\031\036\035\037\047\046" +
    "\043\047\044\050\034\055\037\056\026\057\052\060\033" +
    "\061\032\063\045\067\025\070\036\071\030\073\053\077" +
    "\042\001\002\000\014\002\000\004\015\005\012\022\104" +
    "\023\106\001\002\000\004\002\ufff0\001\002\000\052\002" +
    "\uffbd\004\uffbd\005\uffbd\007\uffbd\010\uffbd\015\uffbd\017\uffbd" +
    "\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd\026" +
    "\uffbd\034\uffbd\035\uffbd\053\uffbd\062\uffbd\064\uffbd\072\uffbd" +
    "\001\002\000\052\002\uffb9\004\uffb9\005\uffb9\007\uffb9\010" +
    "\uffb9\015\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9" +
    "\024\uffb9\025\uffb9\026\uffb9\034\uffb9\035\uffb9\053\uffb9\062" +
    "\uffb9\064\uffb9\072\uffb9\001\002\000\052\002\uffbe\004\uffbe" +
    "\005\uffbe\007\uffbe\010\uffbe\015\uffbe\017\uffbe\020\uffbe\021" +
    "\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\034\uffbe" +
    "\035\uffbe\053\uffbe\062\uffbe\064\uffbe\072\uffbe\001\002\000" +
    "\020\002\uffe6\004\uffe6\005\uffe6\010\uffe6\022\uffe6\023\uffe6" +
    "\034\uffe6\001\002\000\052\002\uffbc\004\uffbc\005\uffbc\007" +
    "\uffbc\010\uffbc\015\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc" +
    "\023\uffbc\024\uffbc\025\uffbc\026\uffbc\034\uffbc\035\uffbc\053" +
    "\uffbc\062\uffbc\064\uffbc\072\uffbc\001\002\000\006\007\133" +
    "\072\125\001\002\000\006\007\uffd9\072\uffd9\001\002\000" +
    "\010\002\000\004\015\005\012\001\002\000\006\007\uffda" +
    "\072\uffda\001\002\000\004\002\ufff7\001\002\000\010\002" +
    "\000\004\015\005\012\001\002\000\004\002\ufff8\001\002" +
    "\000\044\007\130\016\041\046\043\047\044\050\034\055" +
    "\037\056\026\057\052\060\033\061\032\063\045\067\025" +
    "\070\036\071\030\072\125\073\053\077\042\001\002\000" +
    "\010\002\000\004\015\005\012\001\002\000\004\002\ufff6" +
    "\001\002\000\010\002\uffee\004\uffee\005\uffee\001\002\000" +
    "\024\002\uffed\004\uffed\005\uffed\017\061\020\056\021\062" +
    "\053\063\062\057\064\060\001\002\000\004\002\uffff\001" +
    "\002\000\004\007\227\001\002\000\004\073\230\001\002" +
    "\000\004\010\231\001\002\000\012\007\uffd6\013\uffd6\066" +
    "\uffd6\072\uffd6\001\002\000\004\002\uffef\001\002\000\016" +
    "\002\uffd4\004\uffd4\005\uffd4\006\uffd4\013\uffd4\066\uffd4\001" +
    "\002\000\006\013\236\066\235\001\002\000\016\002\uffd0" +
    "\004\uffd0\005\uffd0\006\uffd0\007\uffd0\072\uffd0\001\002\000" +
    "\016\002\uffd1\004\uffd1\005\uffd1\006\uffd1\007\uffd1\072\uffd1" +
    "\001\002\000\016\002\uffd5\004\uffd5\005\uffd5\006\uffd5\007" +
    "\133\072\125\001\002\000\012\002\uffd2\004\uffd2\005\uffd2" +
    "\006\241\001\002\000\042\007\054\016\041\046\043\047" +
    "\044\050\034\055\037\056\026\057\052\060\033\061\032" +
    "\063\045\067\025\070\036\071\030\073\053\077\042\001" +
    "\002\000\026\002\uffb6\004\uffb6\005\uffb6\015\244\017\061" +
    "\020\056\021\062\053\063\062\057\064\060\001\002\000" +
    "\010\002\uffd3\004\uffd3\005\uffd3\001\002\000\042\007\054" +
    "\016\041\046\043\047\044\050\034\055\037\056\026\057" +
    "\052\060\033\061\032\063\045\067\025\070\036\071\030" +
    "\073\053\077\042\001\002\000\024\002\uffb7\004\uffb7\005" +
    "\uffb7\017\061\020\056\021\062\053\063\062\057\064\060" +
    "\001\002\000\010\002\000\004\015\005\012\001\002\000" +
    "\010\002\000\004\015\005\012\001\002\000\004\002\ufff5" +
    "\001\002\000\004\002\ufff4\001\002\000\010\002\000\004" +
    "\015\005\012\001\002\000\024\002\000\004\015\005\012" +
    "\017\061\020\056\021\062\053\063\062\057\064\060\001" +
    "\002\000\004\002\ufff3\001\002\000\004\002\ufff2\001\002" +
    "\000\010\002\000\004\015\005\012\001\002\000\010\002" +
    "\000\004\015\005\012\001\002\000\004\002\ufffa\001\002" +
    "\000\004\002\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\257\000\012\003\003\004\020\011\021\012\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\256" +
    "\001\001\000\010\017\026\020\047\021\252\001\001\000" +
    "\004\010\246\001\001\000\010\007\125\013\233\014\232" +
    "\001\001\000\002\001\001\000\004\003\231\001\001\000" +
    "\002\001\001\000\012\003\003\004\224\011\021\012\010" +
    "\001\001\000\004\010\220\001\001\000\004\022\210\001" +
    "\001\000\012\017\026\020\047\021\050\030\037\001\001" +
    "\000\002\001\001\000\004\003\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\017\026" +
    "\020\047\021\207\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\017\026\020\047\021\050\030\206\001\001" +
    "\000\010\017\026\020\047\021\205\001\001\000\010\017" +
    "\026\020\047\021\204\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\017\026\020\047\021" +
    "\203\001\001\000\002\001\001\000\010\017\026\020\047" +
    "\021\111\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\017\026\020\047\021\110\001\001" +
    "\000\012\017\026\020\047\021\102\030\101\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\017\026\020\047\021\054\001\001\000\002\001\001\000" +
    "\010\017\026\020\047\021\071\001\001\000\002\001\001" +
    "\000\010\017\026\020\047\021\070\001\001\000\010\017" +
    "\026\020\047\021\067\001\001\000\010\017\026\020\047" +
    "\021\066\001\001\000\010\017\026\020\047\021\065\001" +
    "\001\000\010\017\026\020\047\021\064\001\001\000\010" +
    "\017\026\020\047\021\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\017\026\020\047\021\100\001\001\000\010" +
    "\017\026\020\047\021\077\001\001\000\010\017\026\020" +
    "\047\021\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\017\026\020\047\021\050\030\107\001\001\000\002" +
    "\001\001\000\012\017\026\020\047\021\050\030\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\031\113\001\001\000\004\003" +
    "\177\001\001\000\002\001\001\000\014\007\125\014\172" +
    "\017\026\020\047\021\173\001\001\000\014\007\125\014" +
    "\126\017\026\020\047\021\130\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\031\122\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\007\125\014\133\017\026\020" +
    "\047\021\071\001\001\000\006\007\125\014\131\001\001" +
    "\000\002\001\001\000\006\007\125\014\133\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\125\014\146" +
    "\001\001\000\006\007\125\014\145\001\001\000\006\007" +
    "\125\014\144\001\001\000\006\007\125\014\143\001\001" +
    "\000\006\007\125\014\142\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\023\153\024\152\025\151\001\001\000" +
    "\004\026\160\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\023\156\025" +
    "\151\001\001\000\002\001\001\000\004\026\171\001\001" +
    "\000\004\027\161\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\125\014\174" +
    "\001\001\000\002\001\001\000\010\017\026\020\047\021" +
    "\176\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\017\026\020\047\021\050\030\201\001\001\000\004\003" +
    "\202\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\125\014\215\001\001\000\002\001\001" +
    "\000\004\003\214\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\216\001\001\000\002\001\001\000\014" +
    "\007\125\014\222\017\026\020\047\021\223\001\001\000" +
    "\004\003\221\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\236\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\007\125\013\237" +
    "\014\232\001\001\000\002\001\001\000\012\016\242\017" +
    "\026\020\047\021\241\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\017\026\020\047\021\244\001\001\000" +
    "\002\001\001\000\004\003\250\001\001\000\004\003\247" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\254\001\001\000\004\003\253\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\260\001\001\000\004\003" +
    "\257\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	parseErrors = new ArrayList();

    }


	/** List of parse errors. */
	public List parseErrors;
	
      public ASTRoot ast=new ASTRoot();
	/** This method is called when a syntax error has been detected
	 * and recovery is about to be invoked. This parser adds
	 * the offending token to the parseErrors list. */
	public void syntax_error (java_cup.runtime.Symbol token) {
		parseErrors.add(token);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	/** Returns an empty list. */
	private List list () {return new ArrayList();}
	/** Returns a list containing only the given object. */
	private List list (Object o) {List l = list(); append(l,o); return l;}
	/** Appends the given object to the end of the list. */
	private List append (List l, Object o) {l.add(o); return l;}
	/** Prepends the given object to the beginning of the list. */
	private List prepend (Object o, List l) {l.add(0,o); return l;}
	/** Concatenates two lists. */
	private List concat (List l1, List l2) {l1.addAll(l2); return l1;}
	
	
	

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // link_state ::= KAPPA_WLD 
            {
              link RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		 RESULT=new LNK_ANY().mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*link_state*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // link_state ::= KAPPA_LNK ID DOT ID 
            {
              link RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String v4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new LNK_TYPE(v2,v4).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*link_state*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // link_state ::= KAPPA_LNK KAPPA_SEMI 
            {
              link RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		 RESULT=new LNK_SOME().mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*link_state*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // link_state ::= KAPPA_LNK INT 
            {
              link RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer v2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new LNK_VALUE(v2).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*link_state*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // link_state ::= 
            {
              link RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		 RESULT=new FREE().mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*link_state*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // internal_state ::= KAPPA_MRK internal_state 
            {
              internal RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		internal v2 = (internal)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 v2.v1.add(v3); RESULT= v2.mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*internal_state*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // internal_state ::= 
            {
              internal RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		 RESULT=new internal(); 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*internal_state*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // port_expression ::= ID internal_state link_state 
            {
              port RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		internal v4 = (internal)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		link v3 = (link)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT= new port(v1,v4,v3).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*port_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ne_interface_expression ::= port_expression 
            {
              interface1 RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		port v1 = (port)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new PORT_SEP(v1,new EMPTY_INTF()).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*ne_interface_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ne_interface_expression ::= port_expression COMMA ne_interface_expression 
            {
              interface1 RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		port v1 = (port)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		interface1 v3 = (interface1)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new PORT_SEP(v1,v3).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*ne_interface_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // interface_expression ::= ne_interface_expression 
            {
              interface1 RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		interface1 v1 = (interface1)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=v1; 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*interface_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // interface_expression ::= 
            {
              interface1 RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		 RESULT=new EMPTY_INTF().mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*interface_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // agent_expression ::= ID 
            {
              agent RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new agent(v1,new EMPTY_INTF()).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*agent_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // agent_expression ::= ID OP_PAR interface_expression CL_PAR 
            {
              agent RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		interface1 v3 = (interface1)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new agent(v1,v3).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*agent_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // non_empty_mixture ::= agent_expression 
            {
              mixture RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		agent v1 = (agent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new COMMA(v1,new EMPTY_MIX()).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*non_empty_mixture*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // non_empty_mixture ::= agent_expression PLUS_RADIUS non_empty_mixture 
            {
              mixture RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		agent v1 = (agent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer v2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		mixture v3 = (mixture)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new PLUS(v2,v1,v3).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*non_empty_mixture*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // non_empty_mixture ::= agent_expression PLUS non_empty_mixture 
            {
              mixture RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		agent v1 = (agent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		mixture v3 = (mixture)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new PLUS(-1,v1,v3).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*non_empty_mixture*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // non_empty_mixture ::= agent_expression DOT_RADIUS non_empty_mixture 
            {
              mixture RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		agent v1 = (agent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer v2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		mixture v3 = (mixture)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new DOT(v2,v1,v3).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*non_empty_mixture*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // non_empty_mixture ::= agent_expression DOT non_empty_mixture 
            {
              mixture RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		agent v1 = (agent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		mixture v3 = (mixture)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new DOT(-1,v1,v3).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*non_empty_mixture*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // non_empty_mixture ::= agent_expression COMMA non_empty_mixture 
            {
              mixture RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		agent v1 = (agent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		mixture v3 = (mixture)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new COMMA(v1,v3).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*non_empty_mixture*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // non_empty_mixture ::= OP_PAR non_empty_mixture CL_PAR 
            {
              mixture RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		mixture v2 = (mixture)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=v2;
              CUP$parser$result = new java_cup.runtime.Symbol(10/*non_empty_mixture*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // rate ::= alg_expr 
            {
              rate RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		alg_expr v1 = (alg_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new rate(v1).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*rate*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // rate ::= alg_expr PIPE alg_expr 
            {
              rate RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		alg_expr v1 = (alg_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		alg_expr v3 = (alg_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new rate(v1,v3).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*rate*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // alg_expr ::= LOG alg_expr 
            {
              alg_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		alg_expr v2 = (alg_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new LOG(v2).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*alg_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // alg_expr ::= SQRT alg_expr 
            {
              alg_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		alg_expr v2 = (alg_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new SQRT(v2).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*alg_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // alg_expr ::= ABS alg_expr 
            {
              alg_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		alg_expr v2 = (alg_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new ABS(v2).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*alg_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // alg_expr ::= TAN alg_expr 
            {
              alg_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		alg_expr v2 = (alg_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new TAN(v2).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*alg_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // alg_expr ::= COSINUS alg_expr 
            {
              alg_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		alg_expr v2 = (alg_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new COSINUS(v2).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*alg_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // alg_expr ::= SINUS alg_expr 
            {
              alg_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		alg_expr v2 = (alg_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new SINUS(v2).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*alg_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // alg_expr ::= EXPONENT alg_expr 
            {
              alg_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		alg_expr v2 = (alg_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new EXP(v2).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*alg_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // alg_expr ::= alg_expr MODULO alg_expr 
            {
              alg_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		alg_expr v1 = (alg_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		alg_expr v3 = (alg_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new SUM(v1,v3).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*alg_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // alg_expr ::= alg_expr POW alg_expr 
            {
              alg_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		alg_expr v1 = (alg_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		alg_expr v3 = (alg_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new SUM(v1,v3).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*alg_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // alg_expr ::= alg_expr MINUS alg_expr 
            {
              alg_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		alg_expr v1 = (alg_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		alg_expr v3 = (alg_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new SUM(v1,v3).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*alg_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // alg_expr ::= alg_expr DIV alg_expr 
            {
              alg_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		alg_expr v1 = (alg_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		alg_expr v3 = (alg_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new DIV(v1,v3).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*alg_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // alg_expr ::= alg_expr PLUS alg_expr 
            {
              alg_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		alg_expr v1 = (alg_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		alg_expr v3 = (alg_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new SUM(v1,v3).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*alg_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // alg_expr ::= alg_expr MULT alg_expr 
            {
              alg_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		alg_expr v1 = (alg_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		alg_expr v3 = (alg_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new MULT(v1,v3).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*alg_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // alg_expr ::= variable 
            {
              alg_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		alg_expr v2 = (alg_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=v2;
              CUP$parser$result = new java_cup.runtime.Symbol(15/*alg_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // alg_expr ::= constant 
            {
              alg_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		alg_expr v2 = (alg_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=v2;
              CUP$parser$result = new java_cup.runtime.Symbol(15/*alg_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // alg_expr ::= OP_PAR alg_expr CL_PAR 
            {
              alg_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		alg_expr v2 = (alg_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=v2;
              CUP$parser$result = new java_cup.runtime.Symbol(15/*alg_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // variable ::= EVENT 
            {
              alg_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		 RESULT= new EVENT_VAR().mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*variable*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // variable ::= TIME 
            {
              alg_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		 RESULT= new TIME_VAR().mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*variable*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // variable ::= LABEL 
            {
              alg_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT= new OBS_VAR(v1).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*variable*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // constant ::= TMAX 
            {
              alg_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		 RESULT= new TMAX().mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*constant*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // constant ::= EMAX 
            {
              alg_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		 RESULT= new EMAX().mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*constant*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // constant ::= INT 
            {
              alg_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer v1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT= new FLOAT((float)v1).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*constant*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // constant ::= FLOAT 
            {
              alg_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Float v1 = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT= new FLOAT(v1).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*constant*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // constant ::= INFINITY 
            {
              alg_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		 RESULT= new INFINITY().mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*constant*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // arrow ::= KAPPA_NOPOLY 
            {
              arrow RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		 RESULT= new RAR_NOPOLY().mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*arrow*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // arrow ::= KAPPA_RAR 
            {
              arrow RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RESULT= new RAR().mark(left,right);
              CUP$parser$result = new java_cup.runtime.Symbol(11/*arrow*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // rule_expression ::= rule_label mixture arrow mixture 
            {
              Rules RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		rule_label v1 = (rule_label)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		mixture v2 = (mixture)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arrow v3 = (arrow)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		mixture v4 = (mixture)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new Rules(v1,new rule(v2,v3,v4,new FLOAT(1.0f))).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*rule_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // rule_expression ::= rule_label mixture arrow mixture AT rate 
            {
              Rules RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		rule_label v1 = (rule_label)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		mixture v2 = (mixture)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		arrow v3 = (arrow)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		mixture v4 = (mixture)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		rate v5 = (rate)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new Rules(v1,new rule(v2,v3,v4,v5.v11,v5.v12)).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*rule_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // mixture ::= non_empty_mixture 
            {
              mixture RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		mixture v1 = (mixture)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=v1; 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*mixture*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // mixture ::= 
            {
              mixture RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		 RESULT= new EMPTY_MIX().mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*mixture*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // rule_label ::= REF LABEL OP_PAR LABEL CL_PAR 
            {
              rule_label RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new rule_label(v4,v2).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*rule_label*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // rule_label ::= LABEL 
            {
              rule_label RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new rule_label(v1).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*rule_label*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // rule_label ::= 
            {
              rule_label RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		 RESULT=new rule_label().mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*rule_label*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // multiple ::= LABEL 
            {
              alg_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new OBS_VAR(v1).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*multiple*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // multiple ::= INT 
            {
              alg_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer v1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new FLOAT((float) v1).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*multiple*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // multiple ::= 
            {
              alg_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		 RESULT=new FLOAT(1.0f); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*multiple*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // modif_expr ::= STOP 
            {
              modif_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		 RESULT=new STOP(); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*modif_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // modif_expr ::= SNAPSHOT 
            {
              modif_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		 RESULT=new SNAPSHOT(); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*modif_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // modif_expr ::= LABEL SET alg_expr 
            {
              modif_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		alg_expr v3 = (alg_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new UPDATE(v1,v3); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*modif_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // modif_expr ::= DELETE non_empty_mixture 
            {
              modif_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		mixture v2 = (mixture)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new DELETE(new FLOAT(1.0f),v2); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*modif_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // modif_expr ::= DELETE alg_expr non_empty_mixture 
            {
              modif_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		alg_expr v1 = (alg_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		mixture v2 = (mixture)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new DELETE(v1,v2); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*modif_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // modif_expr ::= INTRO non_empty_mixture 
            {
              modif_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		mixture v2 = (mixture)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new INTRO(new FLOAT(1.0f),v2); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*modif_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // modif_expr ::= INTRO alg_expr non_empty_mixture 
            {
              modif_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		alg_expr v1 = (alg_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		mixture v2 = (mixture)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new INTRO(v1,v2); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*modif_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // modif_expr ::= OP_PAR modif_expr CL_PAR 
            {
              modif_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		modif_expr v2 = (modif_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=v2; 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*modif_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // bool_expr ::= FALSE 
            {
              bool_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		 RESULT=new FALSE(); 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*bool_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // bool_expr ::= TRUE 
            {
              bool_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		 RESULT=new TRUE(); 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*bool_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // bool_expr ::= NOT bool_expr 
            {
              bool_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		bool_expr v1 = (bool_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new NOT(v1); 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*bool_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // bool_expr ::= alg_expr EQUAL alg_expr 
            {
              bool_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		alg_expr v1 = (alg_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		alg_expr v2 = (alg_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new EQUAL(v1,v2); 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*bool_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // bool_expr ::= alg_expr SMALLER alg_expr 
            {
              bool_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		alg_expr v1 = (alg_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		alg_expr v2 = (alg_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new SMALLER(v1,v2); 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*bool_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // bool_expr ::= alg_expr GREATER alg_expr 
            {
              bool_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		alg_expr v1 = (alg_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		alg_expr v2 = (alg_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new GREATER(v1,v2); 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*bool_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // bool_expr ::= bool_expr OR bool_expr 
            {
              bool_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bool_expr v1 = (bool_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		bool_expr v2 = (bool_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new OR(v1,v2); 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*bool_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // bool_expr ::= bool_expr AND bool_expr 
            {
              bool_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bool_expr v1 = (bool_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		bool_expr v2 = (bool_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new AND(v1,v2); 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*bool_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // bool_expr ::= OP_PAR bool_expr CL_PAR 
            {
              bool_expr RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bool_expr v1 = (bool_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=v1; 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*bool_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // variable_declaration ::= LABEL alg_expr 
            {
              Variables RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		alg_expr v2 = (alg_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new VAR_ALG(v2,v1).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*variable_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // variable_declaration ::= LABEL non_empty_mixture 
            {
              Variables RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		mixture v2 = (mixture)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new VAR_KAPPA(v2,v1).mark(left,right); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*variable_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // start_rule ::= error newline 
            {
              Object RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=v2; 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*start_rule*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // start_rule ::= PERT bool_expr DO modif_expr UNTIL bool_expr newline 
            {
              Object RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		bool_expr v2 = (bool_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		modif_expr v4 = (modif_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bool_expr v5 = (bool_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  parser.ast.addPer(new pertubation(v2,v4,v5)); RESULT=v3;
              CUP$parser$result = new java_cup.runtime.Symbol(2/*start_rule*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // start_rule ::= PERT bool_expr DO modif_expr newline 
            {
              Object RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		bool_expr v2 = (bool_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		modif_expr v4 = (modif_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.ast.addPer(new pertubation(v2,v4)); RESULT=v3; 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*start_rule*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // start_rule ::= PLOT error newline 
            {
              Object RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=v2; 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*start_rule*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // start_rule ::= PLOT alg_expr newline 
            {
              Object RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		alg_expr v2 = (alg_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.ast.addObs(new Observables((OBS_VAR)v2)); RESULT=v3; 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*start_rule*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // start_rule ::= OBS error newline 
            {
              Object RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=v2; 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*start_rule*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // start_rule ::= OBS variable_declaration newline 
            {
              Object RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Variables v2 = (Variables)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.ast.addVar(v2); parser.ast.addObs(new Observables(new OBS_VAR(v2.name))); RESULT=v3; 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*start_rule*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // start_rule ::= LET variable_declaration newline 
            {
              Object RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Variables v2 = (Variables)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.ast.addVar(v2); RESULT=v3; 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*start_rule*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // start_rule ::= INIT error newline 
            {
              Object RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=v2; 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*start_rule*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // start_rule ::= INIT multiple non_empty_mixture newline 
            {
              Object RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		alg_expr v2 = (alg_expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		mixture v3 = (mixture)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.ast.addInit(new Init(v2,v3).mark(left,right)); RESULT=v4; 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*start_rule*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // start_rule ::= SIGNATURE error newline 
            {
              Object RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=v2; 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*start_rule*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // start_rule ::= SIGNATURE agent_expression newline 
            {
              Object RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		agent v2 = (agent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.ast.addSig(new Signatures(v2)); RESULT=v3; 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*start_rule*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // start_rule ::= rule_expression newline 
            {
              Object RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Rules v1 = (Rules)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.ast.addRul(v1); RESULT=v2; 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*start_rule*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // start_rule ::= newline 
            {
              Object RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = n; 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*start_rule*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // start_rule ::= 
            {
              Object RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*start_rule*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // newline ::= EOF1 
            {
              Object RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*newline*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // newline ::= NEWLINE start_rule 
            {
              Object RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=s; 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*newline*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // newline ::= 
            {
              Object RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*newline*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= start_rule EOF 
            {
              Object RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

